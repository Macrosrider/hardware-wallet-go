// Code generated by mockery v1.0.0. DO NOT EDIT.

package skywallet

import (
	wire "github.com/SkycoinProject/hardware-wallet-go/src/skywallet/wire"
	mock "github.com/stretchr/testify/mock"
)

// MockTransactionSigner is an autogenerated mock type for the TransactionSigner type
type MockTransactionSigner struct {
	mock.Mock
}

// GetSignatures provides a mock function with given fields:
func (_m *MockTransactionSigner) GetSignatures() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// InitSigningProcess provides a mock function with given fields:
func (_m *MockTransactionSigner) InitSigningProcess() (wire.Message, error) {
	ret := _m.Called()

	var r0 wire.Message
	if rf, ok := ret.Get(0).(func() wire.Message); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(wire.Message)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendInputs provides a mock function with given fields: startIndex, count
func (_m *MockTransactionSigner) SendInputs(startIndex int, count int) (wire.Message, error) {
	ret := _m.Called(startIndex, count)

	var r0 wire.Message
	if rf, ok := ret.Get(0).(func(int, int) wire.Message); ok {
		r0 = rf(startIndex, count)
	} else {
		r0 = ret.Get(0).(wire.Message)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(startIndex, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendOutputs provides a mock function with given fields: startIndex, count
func (_m *MockTransactionSigner) SendOutputs(startIndex int, count int) (wire.Message, error) {
	ret := _m.Called(startIndex, count)

	var r0 wire.Message
	if rf, ok := ret.Get(0).(func(int, int) wire.Message); ok {
		r0 = rf(startIndex, count)
	} else {
		r0 = ret.Get(0).(wire.Message)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(startIndex, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
