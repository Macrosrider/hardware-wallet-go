// Code generated by protoc-gen-go. DO NOT EDIT.
// source: types.proto

package messages

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// *
// Type of failures returned by Failure message
// @used_in Failure
type FailureType int32

const (
	FailureType_Failure_UnexpectedMessage FailureType = 1
	FailureType_Failure_ButtonExpected    FailureType = 2
	FailureType_Failure_DataError         FailureType = 3
	FailureType_Failure_ActionCancelled   FailureType = 4
	FailureType_Failure_PinExpected       FailureType = 5
	FailureType_Failure_PinCancelled      FailureType = 6
	FailureType_Failure_PinInvalid        FailureType = 7
	FailureType_Failure_InvalidSignature  FailureType = 8
	FailureType_Failure_ProcessError      FailureType = 9
	FailureType_Failure_NotEnoughFunds    FailureType = 10
	FailureType_Failure_NotInitialized    FailureType = 11
	FailureType_Failure_PinMismatch       FailureType = 12
	FailureType_Failure_AddressGeneration FailureType = 13
	FailureType_Failure_FirmwareError     FailureType = 99
)

var FailureType_name = map[int32]string{
	1:  "Failure_UnexpectedMessage",
	2:  "Failure_ButtonExpected",
	3:  "Failure_DataError",
	4:  "Failure_ActionCancelled",
	5:  "Failure_PinExpected",
	6:  "Failure_PinCancelled",
	7:  "Failure_PinInvalid",
	8:  "Failure_InvalidSignature",
	9:  "Failure_ProcessError",
	10: "Failure_NotEnoughFunds",
	11: "Failure_NotInitialized",
	12: "Failure_PinMismatch",
	13: "Failure_AddressGeneration",
	99: "Failure_FirmwareError",
}
var FailureType_value = map[string]int32{
	"Failure_UnexpectedMessage": 1,
	"Failure_ButtonExpected":    2,
	"Failure_DataError":         3,
	"Failure_ActionCancelled":   4,
	"Failure_PinExpected":       5,
	"Failure_PinCancelled":      6,
	"Failure_PinInvalid":        7,
	"Failure_InvalidSignature":  8,
	"Failure_ProcessError":      9,
	"Failure_NotEnoughFunds":    10,
	"Failure_NotInitialized":    11,
	"Failure_PinMismatch":       12,
	"Failure_AddressGeneration": 13,
	"Failure_FirmwareError":     99,
}

func (x FailureType) Enum() *FailureType {
	p := new(FailureType)
	*p = x
	return p
}
func (x FailureType) String() string {
	return proto.EnumName(FailureType_name, int32(x))
}
func (x *FailureType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FailureType_value, data, "FailureType")
	if err != nil {
		return err
	}
	*x = FailureType(value)
	return nil
}
func (FailureType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// *
// Type of script which will be used for transaction output
// @used_in TxOutputType
type OutputScriptType int32

const (
	OutputScriptType_PAYTOADDRESS     OutputScriptType = 0
	OutputScriptType_PAYTOSCRIPTHASH  OutputScriptType = 1
	OutputScriptType_PAYTOMULTISIG    OutputScriptType = 2
	OutputScriptType_PAYTOOPRETURN    OutputScriptType = 3
	OutputScriptType_PAYTOWITNESS     OutputScriptType = 4
	OutputScriptType_PAYTOP2SHWITNESS OutputScriptType = 5
)

var OutputScriptType_name = map[int32]string{
	0: "PAYTOADDRESS",
	1: "PAYTOSCRIPTHASH",
	2: "PAYTOMULTISIG",
	3: "PAYTOOPRETURN",
	4: "PAYTOWITNESS",
	5: "PAYTOP2SHWITNESS",
}
var OutputScriptType_value = map[string]int32{
	"PAYTOADDRESS":     0,
	"PAYTOSCRIPTHASH":  1,
	"PAYTOMULTISIG":    2,
	"PAYTOOPRETURN":    3,
	"PAYTOWITNESS":     4,
	"PAYTOP2SHWITNESS": 5,
}

func (x OutputScriptType) Enum() *OutputScriptType {
	p := new(OutputScriptType)
	*p = x
	return p
}
func (x OutputScriptType) String() string {
	return proto.EnumName(OutputScriptType_name, int32(x))
}
func (x *OutputScriptType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OutputScriptType_value, data, "OutputScriptType")
	if err != nil {
		return err
	}
	*x = OutputScriptType(value)
	return nil
}
func (OutputScriptType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

// *
// Type of script which will be used for transaction output
// @used_in TxInputType
type InputScriptType int32

const (
	InputScriptType_SPENDADDRESS     InputScriptType = 0
	InputScriptType_SPENDMULTISIG    InputScriptType = 1
	InputScriptType_EXTERNAL         InputScriptType = 2
	InputScriptType_SPENDWITNESS     InputScriptType = 3
	InputScriptType_SPENDP2SHWITNESS InputScriptType = 4
)

var InputScriptType_name = map[int32]string{
	0: "SPENDADDRESS",
	1: "SPENDMULTISIG",
	2: "EXTERNAL",
	3: "SPENDWITNESS",
	4: "SPENDP2SHWITNESS",
}
var InputScriptType_value = map[string]int32{
	"SPENDADDRESS":     0,
	"SPENDMULTISIG":    1,
	"EXTERNAL":         2,
	"SPENDWITNESS":     3,
	"SPENDP2SHWITNESS": 4,
}

func (x InputScriptType) Enum() *InputScriptType {
	p := new(InputScriptType)
	*p = x
	return p
}
func (x InputScriptType) String() string {
	return proto.EnumName(InputScriptType_name, int32(x))
}
func (x *InputScriptType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(InputScriptType_value, data, "InputScriptType")
	if err != nil {
		return err
	}
	*x = InputScriptType(value)
	return nil
}
func (InputScriptType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

// *
// Type of information required by transaction signing process
// @used_in TxRequest
type RequestType int32

const (
	RequestType_TXINPUT     RequestType = 0
	RequestType_TXOUTPUT    RequestType = 1
	RequestType_TXMETA      RequestType = 2
	RequestType_TXFINISHED  RequestType = 3
	RequestType_TXEXTRADATA RequestType = 4
)

var RequestType_name = map[int32]string{
	0: "TXINPUT",
	1: "TXOUTPUT",
	2: "TXMETA",
	3: "TXFINISHED",
	4: "TXEXTRADATA",
}
var RequestType_value = map[string]int32{
	"TXINPUT":     0,
	"TXOUTPUT":    1,
	"TXMETA":      2,
	"TXFINISHED":  3,
	"TXEXTRADATA": 4,
}

func (x RequestType) Enum() *RequestType {
	p := new(RequestType)
	*p = x
	return p
}
func (x RequestType) String() string {
	return proto.EnumName(RequestType_name, int32(x))
}
func (x *RequestType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RequestType_value, data, "RequestType")
	if err != nil {
		return err
	}
	*x = RequestType(value)
	return nil
}
func (RequestType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

// *
// Type of button request
// @used_in ButtonRequest
type ButtonRequestType int32

const (
	ButtonRequestType_ButtonRequest_Other             ButtonRequestType = 1
	ButtonRequestType_ButtonRequest_FeeOverThreshold  ButtonRequestType = 2
	ButtonRequestType_ButtonRequest_ConfirmOutput     ButtonRequestType = 3
	ButtonRequestType_ButtonRequest_ResetDevice       ButtonRequestType = 4
	ButtonRequestType_ButtonRequest_ConfirmWord       ButtonRequestType = 5
	ButtonRequestType_ButtonRequest_WipeDevice        ButtonRequestType = 6
	ButtonRequestType_ButtonRequest_ProtectCall       ButtonRequestType = 7
	ButtonRequestType_ButtonRequest_SignTx            ButtonRequestType = 8
	ButtonRequestType_ButtonRequest_FirmwareCheck     ButtonRequestType = 9
	ButtonRequestType_ButtonRequest_Address           ButtonRequestType = 10
	ButtonRequestType_ButtonRequest_PublicKey         ButtonRequestType = 11
	ButtonRequestType_ButtonRequest_MnemonicWordCount ButtonRequestType = 12
	ButtonRequestType_ButtonRequest_MnemonicInput     ButtonRequestType = 13
	ButtonRequestType_ButtonRequest_PassphraseType    ButtonRequestType = 14
)

var ButtonRequestType_name = map[int32]string{
	1:  "ButtonRequest_Other",
	2:  "ButtonRequest_FeeOverThreshold",
	3:  "ButtonRequest_ConfirmOutput",
	4:  "ButtonRequest_ResetDevice",
	5:  "ButtonRequest_ConfirmWord",
	6:  "ButtonRequest_WipeDevice",
	7:  "ButtonRequest_ProtectCall",
	8:  "ButtonRequest_SignTx",
	9:  "ButtonRequest_FirmwareCheck",
	10: "ButtonRequest_Address",
	11: "ButtonRequest_PublicKey",
	12: "ButtonRequest_MnemonicWordCount",
	13: "ButtonRequest_MnemonicInput",
	14: "ButtonRequest_PassphraseType",
}
var ButtonRequestType_value = map[string]int32{
	"ButtonRequest_Other":             1,
	"ButtonRequest_FeeOverThreshold":  2,
	"ButtonRequest_ConfirmOutput":     3,
	"ButtonRequest_ResetDevice":       4,
	"ButtonRequest_ConfirmWord":       5,
	"ButtonRequest_WipeDevice":        6,
	"ButtonRequest_ProtectCall":       7,
	"ButtonRequest_SignTx":            8,
	"ButtonRequest_FirmwareCheck":     9,
	"ButtonRequest_Address":           10,
	"ButtonRequest_PublicKey":         11,
	"ButtonRequest_MnemonicWordCount": 12,
	"ButtonRequest_MnemonicInput":     13,
	"ButtonRequest_PassphraseType":    14,
}

func (x ButtonRequestType) Enum() *ButtonRequestType {
	p := new(ButtonRequestType)
	*p = x
	return p
}
func (x ButtonRequestType) String() string {
	return proto.EnumName(ButtonRequestType_name, int32(x))
}
func (x *ButtonRequestType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ButtonRequestType_value, data, "ButtonRequestType")
	if err != nil {
		return err
	}
	*x = ButtonRequestType(value)
	return nil
}
func (ButtonRequestType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

// *
// Type of PIN request
// @used_in PinMatrixRequest
type PinMatrixRequestType int32

const (
	PinMatrixRequestType_PinMatrixRequestType_Current   PinMatrixRequestType = 1
	PinMatrixRequestType_PinMatrixRequestType_NewFirst  PinMatrixRequestType = 2
	PinMatrixRequestType_PinMatrixRequestType_NewSecond PinMatrixRequestType = 3
)

var PinMatrixRequestType_name = map[int32]string{
	1: "PinMatrixRequestType_Current",
	2: "PinMatrixRequestType_NewFirst",
	3: "PinMatrixRequestType_NewSecond",
}
var PinMatrixRequestType_value = map[string]int32{
	"PinMatrixRequestType_Current":   1,
	"PinMatrixRequestType_NewFirst":  2,
	"PinMatrixRequestType_NewSecond": 3,
}

func (x PinMatrixRequestType) Enum() *PinMatrixRequestType {
	p := new(PinMatrixRequestType)
	*p = x
	return p
}
func (x PinMatrixRequestType) String() string {
	return proto.EnumName(PinMatrixRequestType_name, int32(x))
}
func (x *PinMatrixRequestType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PinMatrixRequestType_value, data, "PinMatrixRequestType")
	if err != nil {
		return err
	}
	*x = PinMatrixRequestType(value)
	return nil
}
func (PinMatrixRequestType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

// *
// Type of recovery procedure. These should be used as bitmask, e.g.,
// `RecoveryDeviceType_ScrambledWords | RecoveryDeviceType_Matrix`
// listing every method supported by the host computer.
//
// Note that ScrambledWords must be supported by every implementation
// for backward compatibility; there is no way to not support it.
//
// @used_in RecoveryDevice
type RecoveryDeviceType int32

const (
	// use powers of two when extending this field
	RecoveryDeviceType_RecoveryDeviceType_ScrambledWords RecoveryDeviceType = 0
	RecoveryDeviceType_RecoveryDeviceType_Matrix         RecoveryDeviceType = 1
)

var RecoveryDeviceType_name = map[int32]string{
	0: "RecoveryDeviceType_ScrambledWords",
	1: "RecoveryDeviceType_Matrix",
}
var RecoveryDeviceType_value = map[string]int32{
	"RecoveryDeviceType_ScrambledWords": 0,
	"RecoveryDeviceType_Matrix":         1,
}

func (x RecoveryDeviceType) Enum() *RecoveryDeviceType {
	p := new(RecoveryDeviceType)
	*p = x
	return p
}
func (x RecoveryDeviceType) String() string {
	return proto.EnumName(RecoveryDeviceType_name, int32(x))
}
func (x *RecoveryDeviceType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RecoveryDeviceType_value, data, "RecoveryDeviceType")
	if err != nil {
		return err
	}
	*x = RecoveryDeviceType(value)
	return nil
}
func (RecoveryDeviceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

// *
// Type of Recovery Word request
// @used_in WordRequest
type WordRequestType int32

const (
	WordRequestType_WordRequestType_Plain   WordRequestType = 0
	WordRequestType_WordRequestType_Matrix9 WordRequestType = 1
	WordRequestType_WordRequestType_Matrix6 WordRequestType = 2
)

var WordRequestType_name = map[int32]string{
	0: "WordRequestType_Plain",
	1: "WordRequestType_Matrix9",
	2: "WordRequestType_Matrix6",
}
var WordRequestType_value = map[string]int32{
	"WordRequestType_Plain":   0,
	"WordRequestType_Matrix9": 1,
	"WordRequestType_Matrix6": 2,
}

func (x WordRequestType) Enum() *WordRequestType {
	p := new(WordRequestType)
	*p = x
	return p
}
func (x WordRequestType) String() string {
	return proto.EnumName(WordRequestType_name, int32(x))
}
func (x *WordRequestType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(WordRequestType_value, data, "WordRequestType")
	if err != nil {
		return err
	}
	*x = WordRequestType(value)
	return nil
}
func (WordRequestType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

// *
// Ask trezor to generate a skycoin address
// @used_in SkycoinAddress｛
type SkycoinAddressType int32

const (
	SkycoinAddressType_AddressTypeSkycoin SkycoinAddressType = 1
	SkycoinAddressType_AddressTypeBitcoin SkycoinAddressType = 2
)

var SkycoinAddressType_name = map[int32]string{
	1: "AddressTypeSkycoin",
	2: "AddressTypeBitcoin",
}
var SkycoinAddressType_value = map[string]int32{
	"AddressTypeSkycoin": 1,
	"AddressTypeBitcoin": 2,
}

func (x SkycoinAddressType) Enum() *SkycoinAddressType {
	p := new(SkycoinAddressType)
	*p = x
	return p
}
func (x SkycoinAddressType) String() string {
	return proto.EnumName(SkycoinAddressType_name, int32(x))
}
func (x *SkycoinAddressType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SkycoinAddressType_value, data, "SkycoinAddressType")
	if err != nil {
		return err
	}
	*x = SkycoinAddressType(value)
	return nil
}
func (SkycoinAddressType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

// *
// Structure representing BIP32 (hierarchical deterministic) node
// Used for imports of private key into the device and exporting public key out of device
// @used_in PublicKey
// @used_in LoadDevice
// @used_in DebugLinkState
// @used_in Storage
type HDNodeType struct {
	Depth            *uint32 `protobuf:"varint,1,req,name=depth" json:"depth,omitempty"`
	Fingerprint      *uint32 `protobuf:"varint,2,req,name=fingerprint" json:"fingerprint,omitempty"`
	ChildNum         *uint32 `protobuf:"varint,3,req,name=child_num,json=childNum" json:"child_num,omitempty"`
	ChainCode        []byte  `protobuf:"bytes,4,req,name=chain_code,json=chainCode" json:"chain_code,omitempty"`
	PrivateKey       []byte  `protobuf:"bytes,5,opt,name=private_key,json=privateKey" json:"private_key,omitempty"`
	PublicKey        []byte  `protobuf:"bytes,6,opt,name=public_key,json=publicKey" json:"public_key,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *HDNodeType) Reset()                    { *m = HDNodeType{} }
func (m *HDNodeType) String() string            { return proto.CompactTextString(m) }
func (*HDNodeType) ProtoMessage()               {}
func (*HDNodeType) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *HDNodeType) GetDepth() uint32 {
	if m != nil && m.Depth != nil {
		return *m.Depth
	}
	return 0
}

func (m *HDNodeType) GetFingerprint() uint32 {
	if m != nil && m.Fingerprint != nil {
		return *m.Fingerprint
	}
	return 0
}

func (m *HDNodeType) GetChildNum() uint32 {
	if m != nil && m.ChildNum != nil {
		return *m.ChildNum
	}
	return 0
}

func (m *HDNodeType) GetChainCode() []byte {
	if m != nil {
		return m.ChainCode
	}
	return nil
}

func (m *HDNodeType) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *HDNodeType) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

type HDNodePathType struct {
	Node             *HDNodeType `protobuf:"bytes,1,req,name=node" json:"node,omitempty"`
	AddressN         []uint32    `protobuf:"varint,2,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *HDNodePathType) Reset()                    { *m = HDNodePathType{} }
func (m *HDNodePathType) String() string            { return proto.CompactTextString(m) }
func (*HDNodePathType) ProtoMessage()               {}
func (*HDNodePathType) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *HDNodePathType) GetNode() *HDNodeType {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *HDNodePathType) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

// *
// Structure representing Coin
// @used_in Features
type CoinType struct {
	CoinName            *string `protobuf:"bytes,1,opt,name=coin_name,json=coinName" json:"coin_name,omitempty"`
	CoinShortcut        *string `protobuf:"bytes,2,opt,name=coin_shortcut,json=coinShortcut" json:"coin_shortcut,omitempty"`
	AddressType         *uint32 `protobuf:"varint,3,opt,name=address_type,json=addressType,def=0" json:"address_type,omitempty"`
	MaxfeeKb            *uint64 `protobuf:"varint,4,opt,name=maxfee_kb,json=maxfeeKb" json:"maxfee_kb,omitempty"`
	AddressTypeP2Sh     *uint32 `protobuf:"varint,5,opt,name=address_type_p2sh,json=addressTypeP2sh,def=5" json:"address_type_p2sh,omitempty"`
	SignedMessageHeader *string `protobuf:"bytes,8,opt,name=signed_message_header,json=signedMessageHeader" json:"signed_message_header,omitempty"`
	XpubMagic           *uint32 `protobuf:"varint,9,opt,name=xpub_magic,json=xpubMagic,def=76067358" json:"xpub_magic,omitempty"`
	XprvMagic           *uint32 `protobuf:"varint,10,opt,name=xprv_magic,json=xprvMagic,def=76066276" json:"xprv_magic,omitempty"`
	Segwit              *bool   `protobuf:"varint,11,opt,name=segwit" json:"segwit,omitempty"`
	Forkid              *uint32 `protobuf:"varint,12,opt,name=forkid" json:"forkid,omitempty"`
	ForceBip143         *bool   `protobuf:"varint,13,opt,name=force_bip143,json=forceBip143" json:"force_bip143,omitempty"`
	XXX_unrecognized    []byte  `json:"-"`
}

func (m *CoinType) Reset()                    { *m = CoinType{} }
func (m *CoinType) String() string            { return proto.CompactTextString(m) }
func (*CoinType) ProtoMessage()               {}
func (*CoinType) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

const Default_CoinType_AddressType uint32 = 0
const Default_CoinType_AddressTypeP2Sh uint32 = 5
const Default_CoinType_XpubMagic uint32 = 76067358
const Default_CoinType_XprvMagic uint32 = 76066276

func (m *CoinType) GetCoinName() string {
	if m != nil && m.CoinName != nil {
		return *m.CoinName
	}
	return ""
}

func (m *CoinType) GetCoinShortcut() string {
	if m != nil && m.CoinShortcut != nil {
		return *m.CoinShortcut
	}
	return ""
}

func (m *CoinType) GetAddressType() uint32 {
	if m != nil && m.AddressType != nil {
		return *m.AddressType
	}
	return Default_CoinType_AddressType
}

func (m *CoinType) GetMaxfeeKb() uint64 {
	if m != nil && m.MaxfeeKb != nil {
		return *m.MaxfeeKb
	}
	return 0
}

func (m *CoinType) GetAddressTypeP2Sh() uint32 {
	if m != nil && m.AddressTypeP2Sh != nil {
		return *m.AddressTypeP2Sh
	}
	return Default_CoinType_AddressTypeP2Sh
}

func (m *CoinType) GetSignedMessageHeader() string {
	if m != nil && m.SignedMessageHeader != nil {
		return *m.SignedMessageHeader
	}
	return ""
}

func (m *CoinType) GetXpubMagic() uint32 {
	if m != nil && m.XpubMagic != nil {
		return *m.XpubMagic
	}
	return Default_CoinType_XpubMagic
}

func (m *CoinType) GetXprvMagic() uint32 {
	if m != nil && m.XprvMagic != nil {
		return *m.XprvMagic
	}
	return Default_CoinType_XprvMagic
}

func (m *CoinType) GetSegwit() bool {
	if m != nil && m.Segwit != nil {
		return *m.Segwit
	}
	return false
}

func (m *CoinType) GetForkid() uint32 {
	if m != nil && m.Forkid != nil {
		return *m.Forkid
	}
	return 0
}

func (m *CoinType) GetForceBip143() bool {
	if m != nil && m.ForceBip143 != nil {
		return *m.ForceBip143
	}
	return false
}

// *
// Type of redeem script used in input
// @used_in TxInputType
type MultisigRedeemScriptType struct {
	Pubkeys          []*HDNodePathType `protobuf:"bytes,1,rep,name=pubkeys" json:"pubkeys,omitempty"`
	Signatures       [][]byte          `protobuf:"bytes,2,rep,name=signatures" json:"signatures,omitempty"`
	M                *uint32           `protobuf:"varint,3,opt,name=m" json:"m,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *MultisigRedeemScriptType) Reset()                    { *m = MultisigRedeemScriptType{} }
func (m *MultisigRedeemScriptType) String() string            { return proto.CompactTextString(m) }
func (*MultisigRedeemScriptType) ProtoMessage()               {}
func (*MultisigRedeemScriptType) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *MultisigRedeemScriptType) GetPubkeys() []*HDNodePathType {
	if m != nil {
		return m.Pubkeys
	}
	return nil
}

func (m *MultisigRedeemScriptType) GetSignatures() [][]byte {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func (m *MultisigRedeemScriptType) GetM() uint32 {
	if m != nil && m.M != nil {
		return *m.M
	}
	return 0
}

// *
// Structure representing transaction input
// @used_in SimpleSignTx
// @used_in TransactionType
type TxInputType struct {
	AddressN            []uint32                  `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	PrevHash            []byte                    `protobuf:"bytes,2,req,name=prev_hash,json=prevHash" json:"prev_hash,omitempty"`
	PrevIndex           *uint32                   `protobuf:"varint,3,req,name=prev_index,json=prevIndex" json:"prev_index,omitempty"`
	ScriptSig           []byte                    `protobuf:"bytes,4,opt,name=script_sig,json=scriptSig" json:"script_sig,omitempty"`
	Sequence            *uint32                   `protobuf:"varint,5,opt,name=sequence,def=4294967295" json:"sequence,omitempty"`
	ScriptType          *InputScriptType          `protobuf:"varint,6,opt,name=script_type,json=scriptType,enum=InputScriptType,def=0" json:"script_type,omitempty"`
	Multisig            *MultisigRedeemScriptType `protobuf:"bytes,7,opt,name=multisig" json:"multisig,omitempty"`
	Amount              *uint64                   `protobuf:"varint,8,opt,name=amount" json:"amount,omitempty"`
	DecredTree          *uint32                   `protobuf:"varint,9,opt,name=decred_tree,json=decredTree" json:"decred_tree,omitempty"`
	DecredScriptVersion *uint32                   `protobuf:"varint,10,opt,name=decred_script_version,json=decredScriptVersion" json:"decred_script_version,omitempty"`
	XXX_unrecognized    []byte                    `json:"-"`
}

func (m *TxInputType) Reset()                    { *m = TxInputType{} }
func (m *TxInputType) String() string            { return proto.CompactTextString(m) }
func (*TxInputType) ProtoMessage()               {}
func (*TxInputType) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

const Default_TxInputType_Sequence uint32 = 4294967295
const Default_TxInputType_ScriptType InputScriptType = InputScriptType_SPENDADDRESS

func (m *TxInputType) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *TxInputType) GetPrevHash() []byte {
	if m != nil {
		return m.PrevHash
	}
	return nil
}

func (m *TxInputType) GetPrevIndex() uint32 {
	if m != nil && m.PrevIndex != nil {
		return *m.PrevIndex
	}
	return 0
}

func (m *TxInputType) GetScriptSig() []byte {
	if m != nil {
		return m.ScriptSig
	}
	return nil
}

func (m *TxInputType) GetSequence() uint32 {
	if m != nil && m.Sequence != nil {
		return *m.Sequence
	}
	return Default_TxInputType_Sequence
}

func (m *TxInputType) GetScriptType() InputScriptType {
	if m != nil && m.ScriptType != nil {
		return *m.ScriptType
	}
	return Default_TxInputType_ScriptType
}

func (m *TxInputType) GetMultisig() *MultisigRedeemScriptType {
	if m != nil {
		return m.Multisig
	}
	return nil
}

func (m *TxInputType) GetAmount() uint64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *TxInputType) GetDecredTree() uint32 {
	if m != nil && m.DecredTree != nil {
		return *m.DecredTree
	}
	return 0
}

func (m *TxInputType) GetDecredScriptVersion() uint32 {
	if m != nil && m.DecredScriptVersion != nil {
		return *m.DecredScriptVersion
	}
	return 0
}

// *
// Structure representing transaction output
// @used_in SimpleSignTx
// @used_in TransactionType
type TxOutputType struct {
	Address             *string                   `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	AddressN            []uint32                  `protobuf:"varint,2,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	Amount              *uint64                   `protobuf:"varint,3,req,name=amount" json:"amount,omitempty"`
	ScriptType          *OutputScriptType         `protobuf:"varint,4,req,name=script_type,json=scriptType,enum=OutputScriptType" json:"script_type,omitempty"`
	Multisig            *MultisigRedeemScriptType `protobuf:"bytes,5,opt,name=multisig" json:"multisig,omitempty"`
	OpReturnData        []byte                    `protobuf:"bytes,6,opt,name=op_return_data,json=opReturnData" json:"op_return_data,omitempty"`
	DecredScriptVersion *uint32                   `protobuf:"varint,7,opt,name=decred_script_version,json=decredScriptVersion" json:"decred_script_version,omitempty"`
	XXX_unrecognized    []byte                    `json:"-"`
}

func (m *TxOutputType) Reset()                    { *m = TxOutputType{} }
func (m *TxOutputType) String() string            { return proto.CompactTextString(m) }
func (*TxOutputType) ProtoMessage()               {}
func (*TxOutputType) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *TxOutputType) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *TxOutputType) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *TxOutputType) GetAmount() uint64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *TxOutputType) GetScriptType() OutputScriptType {
	if m != nil && m.ScriptType != nil {
		return *m.ScriptType
	}
	return OutputScriptType_PAYTOADDRESS
}

func (m *TxOutputType) GetMultisig() *MultisigRedeemScriptType {
	if m != nil {
		return m.Multisig
	}
	return nil
}

func (m *TxOutputType) GetOpReturnData() []byte {
	if m != nil {
		return m.OpReturnData
	}
	return nil
}

func (m *TxOutputType) GetDecredScriptVersion() uint32 {
	if m != nil && m.DecredScriptVersion != nil {
		return *m.DecredScriptVersion
	}
	return 0
}

// *
// Structure representing compiled transaction output
// @used_in TransactionType
type TxOutputBinType struct {
	Amount              *uint64 `protobuf:"varint,1,req,name=amount" json:"amount,omitempty"`
	ScriptPubkey        []byte  `protobuf:"bytes,2,req,name=script_pubkey,json=scriptPubkey" json:"script_pubkey,omitempty"`
	DecredScriptVersion *uint32 `protobuf:"varint,3,opt,name=decred_script_version,json=decredScriptVersion" json:"decred_script_version,omitempty"`
	XXX_unrecognized    []byte  `json:"-"`
}

func (m *TxOutputBinType) Reset()                    { *m = TxOutputBinType{} }
func (m *TxOutputBinType) String() string            { return proto.CompactTextString(m) }
func (*TxOutputBinType) ProtoMessage()               {}
func (*TxOutputBinType) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *TxOutputBinType) GetAmount() uint64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *TxOutputBinType) GetScriptPubkey() []byte {
	if m != nil {
		return m.ScriptPubkey
	}
	return nil
}

func (m *TxOutputBinType) GetDecredScriptVersion() uint32 {
	if m != nil && m.DecredScriptVersion != nil {
		return *m.DecredScriptVersion
	}
	return 0
}

// *
// Structure representing transaction
// @used_in SimpleSignTx
type TransactionType struct {
	Version          *uint32            `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Inputs           []*TxInputType     `protobuf:"bytes,2,rep,name=inputs" json:"inputs,omitempty"`
	BinOutputs       []*TxOutputBinType `protobuf:"bytes,3,rep,name=bin_outputs,json=binOutputs" json:"bin_outputs,omitempty"`
	Outputs          []*TxOutputType    `protobuf:"bytes,5,rep,name=outputs" json:"outputs,omitempty"`
	LockTime         *uint32            `protobuf:"varint,4,opt,name=lock_time,json=lockTime" json:"lock_time,omitempty"`
	InputsCnt        *uint32            `protobuf:"varint,6,opt,name=inputs_cnt,json=inputsCnt" json:"inputs_cnt,omitempty"`
	OutputsCnt       *uint32            `protobuf:"varint,7,opt,name=outputs_cnt,json=outputsCnt" json:"outputs_cnt,omitempty"`
	ExtraData        []byte             `protobuf:"bytes,8,opt,name=extra_data,json=extraData" json:"extra_data,omitempty"`
	ExtraDataLen     *uint32            `protobuf:"varint,9,opt,name=extra_data_len,json=extraDataLen" json:"extra_data_len,omitempty"`
	DecredExpiry     *uint32            `protobuf:"varint,10,opt,name=decred_expiry,json=decredExpiry" json:"decred_expiry,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *TransactionType) Reset()                    { *m = TransactionType{} }
func (m *TransactionType) String() string            { return proto.CompactTextString(m) }
func (*TransactionType) ProtoMessage()               {}
func (*TransactionType) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *TransactionType) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *TransactionType) GetInputs() []*TxInputType {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *TransactionType) GetBinOutputs() []*TxOutputBinType {
	if m != nil {
		return m.BinOutputs
	}
	return nil
}

func (m *TransactionType) GetOutputs() []*TxOutputType {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *TransactionType) GetLockTime() uint32 {
	if m != nil && m.LockTime != nil {
		return *m.LockTime
	}
	return 0
}

func (m *TransactionType) GetInputsCnt() uint32 {
	if m != nil && m.InputsCnt != nil {
		return *m.InputsCnt
	}
	return 0
}

func (m *TransactionType) GetOutputsCnt() uint32 {
	if m != nil && m.OutputsCnt != nil {
		return *m.OutputsCnt
	}
	return 0
}

func (m *TransactionType) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func (m *TransactionType) GetExtraDataLen() uint32 {
	if m != nil && m.ExtraDataLen != nil {
		return *m.ExtraDataLen
	}
	return 0
}

func (m *TransactionType) GetDecredExpiry() uint32 {
	if m != nil && m.DecredExpiry != nil {
		return *m.DecredExpiry
	}
	return 0
}

// *
// Structure representing request details
// @used_in TxRequest
type TxRequestDetailsType struct {
	RequestIndex     *uint32 `protobuf:"varint,1,opt,name=request_index,json=requestIndex" json:"request_index,omitempty"`
	TxHash           []byte  `protobuf:"bytes,2,opt,name=tx_hash,json=txHash" json:"tx_hash,omitempty"`
	ExtraDataLen     *uint32 `protobuf:"varint,3,opt,name=extra_data_len,json=extraDataLen" json:"extra_data_len,omitempty"`
	ExtraDataOffset  *uint32 `protobuf:"varint,4,opt,name=extra_data_offset,json=extraDataOffset" json:"extra_data_offset,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TxRequestDetailsType) Reset()                    { *m = TxRequestDetailsType{} }
func (m *TxRequestDetailsType) String() string            { return proto.CompactTextString(m) }
func (*TxRequestDetailsType) ProtoMessage()               {}
func (*TxRequestDetailsType) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *TxRequestDetailsType) GetRequestIndex() uint32 {
	if m != nil && m.RequestIndex != nil {
		return *m.RequestIndex
	}
	return 0
}

func (m *TxRequestDetailsType) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *TxRequestDetailsType) GetExtraDataLen() uint32 {
	if m != nil && m.ExtraDataLen != nil {
		return *m.ExtraDataLen
	}
	return 0
}

func (m *TxRequestDetailsType) GetExtraDataOffset() uint32 {
	if m != nil && m.ExtraDataOffset != nil {
		return *m.ExtraDataOffset
	}
	return 0
}

// *
// Structure representing serialized data
// @used_in TxRequest
type TxRequestSerializedType struct {
	SignatureIndex   *uint32 `protobuf:"varint,1,opt,name=signature_index,json=signatureIndex" json:"signature_index,omitempty"`
	Signature        []byte  `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	SerializedTx     []byte  `protobuf:"bytes,3,opt,name=serialized_tx,json=serializedTx" json:"serialized_tx,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TxRequestSerializedType) Reset()                    { *m = TxRequestSerializedType{} }
func (m *TxRequestSerializedType) String() string            { return proto.CompactTextString(m) }
func (*TxRequestSerializedType) ProtoMessage()               {}
func (*TxRequestSerializedType) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *TxRequestSerializedType) GetSignatureIndex() uint32 {
	if m != nil && m.SignatureIndex != nil {
		return *m.SignatureIndex
	}
	return 0
}

func (m *TxRequestSerializedType) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *TxRequestSerializedType) GetSerializedTx() []byte {
	if m != nil {
		return m.SerializedTx
	}
	return nil
}

// *
// Structure representing identity data
// @used_in IdentityType
type IdentityType struct {
	Proto            *string `protobuf:"bytes,1,opt,name=proto" json:"proto,omitempty"`
	User             *string `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Host             *string `protobuf:"bytes,3,opt,name=host" json:"host,omitempty"`
	Port             *string `protobuf:"bytes,4,opt,name=port" json:"port,omitempty"`
	Path             *string `protobuf:"bytes,5,opt,name=path" json:"path,omitempty"`
	Index            *uint32 `protobuf:"varint,6,opt,name=index,def=0" json:"index,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *IdentityType) Reset()                    { *m = IdentityType{} }
func (m *IdentityType) String() string            { return proto.CompactTextString(m) }
func (*IdentityType) ProtoMessage()               {}
func (*IdentityType) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

const Default_IdentityType_Index uint32 = 0

func (m *IdentityType) GetProto() string {
	if m != nil && m.Proto != nil {
		return *m.Proto
	}
	return ""
}

func (m *IdentityType) GetUser() string {
	if m != nil && m.User != nil {
		return *m.User
	}
	return ""
}

func (m *IdentityType) GetHost() string {
	if m != nil && m.Host != nil {
		return *m.Host
	}
	return ""
}

func (m *IdentityType) GetPort() string {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return ""
}

func (m *IdentityType) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

func (m *IdentityType) GetIndex() uint32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return Default_IdentityType_Index
}

var E_WireIn = &proto.ExtensionDesc{
	ExtendedType:  (*EnumValueOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         50002,
	Name:          "wire_in",
	Tag:           "varint,50002,opt,name=wire_in,json=wireIn",
	Filename:      "types.proto",
}

var E_WireOut = &proto.ExtensionDesc{
	ExtendedType:  (*EnumValueOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         50003,
	Name:          "wire_out",
	Tag:           "varint,50003,opt,name=wire_out,json=wireOut",
	Filename:      "types.proto",
}

var E_WireDebugIn = &proto.ExtensionDesc{
	ExtendedType:  (*EnumValueOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         50004,
	Name:          "wire_debug_in",
	Tag:           "varint,50004,opt,name=wire_debug_in,json=wireDebugIn",
	Filename:      "types.proto",
}

var E_WireDebugOut = &proto.ExtensionDesc{
	ExtendedType:  (*EnumValueOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         50005,
	Name:          "wire_debug_out",
	Tag:           "varint,50005,opt,name=wire_debug_out,json=wireDebugOut",
	Filename:      "types.proto",
}

var E_WireTiny = &proto.ExtensionDesc{
	ExtendedType:  (*EnumValueOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         50006,
	Name:          "wire_tiny",
	Tag:           "varint,50006,opt,name=wire_tiny,json=wireTiny",
	Filename:      "types.proto",
}

var E_WireBootloader = &proto.ExtensionDesc{
	ExtendedType:  (*EnumValueOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         50007,
	Name:          "wire_bootloader",
	Tag:           "varint,50007,opt,name=wire_bootloader,json=wireBootloader",
	Filename:      "types.proto",
}

func init() {
	proto.RegisterType((*HDNodeType)(nil), "HDNodeType")
	proto.RegisterType((*HDNodePathType)(nil), "HDNodePathType")
	proto.RegisterType((*CoinType)(nil), "CoinType")
	proto.RegisterType((*MultisigRedeemScriptType)(nil), "MultisigRedeemScriptType")
	proto.RegisterType((*TxInputType)(nil), "TxInputType")
	proto.RegisterType((*TxOutputType)(nil), "TxOutputType")
	proto.RegisterType((*TxOutputBinType)(nil), "TxOutputBinType")
	proto.RegisterType((*TransactionType)(nil), "TransactionType")
	proto.RegisterType((*TxRequestDetailsType)(nil), "TxRequestDetailsType")
	proto.RegisterType((*TxRequestSerializedType)(nil), "TxRequestSerializedType")
	proto.RegisterType((*IdentityType)(nil), "IdentityType")
	proto.RegisterEnum("FailureType", FailureType_name, FailureType_value)
	proto.RegisterEnum("OutputScriptType", OutputScriptType_name, OutputScriptType_value)
	proto.RegisterEnum("InputScriptType", InputScriptType_name, InputScriptType_value)
	proto.RegisterEnum("RequestType", RequestType_name, RequestType_value)
	proto.RegisterEnum("ButtonRequestType", ButtonRequestType_name, ButtonRequestType_value)
	proto.RegisterEnum("PinMatrixRequestType", PinMatrixRequestType_name, PinMatrixRequestType_value)
	proto.RegisterEnum("RecoveryDeviceType", RecoveryDeviceType_name, RecoveryDeviceType_value)
	proto.RegisterEnum("WordRequestType", WordRequestType_name, WordRequestType_value)
	proto.RegisterEnum("SkycoinAddressType", SkycoinAddressType_name, SkycoinAddressType_value)
	proto.RegisterExtension(E_WireIn)
	proto.RegisterExtension(E_WireOut)
	proto.RegisterExtension(E_WireDebugIn)
	proto.RegisterExtension(E_WireDebugOut)
	proto.RegisterExtension(E_WireTiny)
	proto.RegisterExtension(E_WireBootloader)
}

func init() { proto.RegisterFile("types.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 2067 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x57, 0x4b, 0x6f, 0xdb, 0xc8,
	0x1d, 0x0f, 0x25, 0x3f, 0xa4, 0xbf, 0x28, 0x7b, 0x3c, 0x79, 0x98, 0xd9, 0x4d, 0x36, 0x8a, 0x93,
	0x36, 0xae, 0x81, 0x0a, 0xbb, 0xda, 0xc4, 0x69, 0xdc, 0xa2, 0xad, 0x1f, 0x72, 0x2c, 0x24, 0x96,
	0x05, 0x8a, 0xde, 0xb8, 0x7b, 0x21, 0x28, 0x72, 0x2c, 0x0d, 0x4c, 0x91, 0xec, 0x70, 0xe8, 0x48,
	0x7b, 0x29, 0x50, 0xa0, 0x2d, 0x50, 0xa0, 0x97, 0x5e, 0x7a, 0xef, 0xa1, 0x9f, 0xa3, 0xb7, 0xde,
	0xfb, 0xfc, 0x22, 0xfd, 0x00, 0xc5, 0x3c, 0xa8, 0x87, 0x1d, 0x17, 0xbe, 0x69, 0x7e, 0xbf, 0xff,
	0xfb, 0x31, 0x23, 0x42, 0x85, 0x8f, 0x13, 0x92, 0xd6, 0x13, 0x16, 0xf3, 0xf8, 0x33, 0x14, 0x90,
	0xd4, 0x67, 0x34, 0xe1, 0x31, 0x53, 0xc8, 0xc6, 0x5f, 0x0d, 0x80, 0xa3, 0x83, 0x76, 0x1c, 0x10,
	0x67, 0x9c, 0x10, 0x7c, 0x0f, 0x16, 0x03, 0x92, 0xf0, 0x81, 0x65, 0xd4, 0x0a, 0x9b, 0x55, 0x5b,
	0x1d, 0x70, 0x0d, 0x2a, 0xe7, 0x34, 0xea, 0x13, 0x96, 0x30, 0x1a, 0x71, 0xab, 0x20, 0xb9, 0x59,
	0x08, 0x7f, 0x0e, 0x65, 0x7f, 0x40, 0xc3, 0xc0, 0x8d, 0xb2, 0xa1, 0x55, 0x94, 0x7c, 0x49, 0x02,
	0xed, 0x6c, 0x88, 0x1f, 0x03, 0xf8, 0x03, 0x8f, 0x46, 0xae, 0x1f, 0x07, 0xc4, 0x5a, 0xa8, 0x15,
	0x36, 0x4d, 0xbb, 0x2c, 0x91, 0xfd, 0x38, 0x20, 0xf8, 0x09, 0x54, 0x12, 0x46, 0x2f, 0x3d, 0x4e,
	0xdc, 0x0b, 0x32, 0xb6, 0x16, 0x6b, 0xc6, 0xa6, 0x69, 0x83, 0x86, 0xde, 0x91, 0xb1, 0xd0, 0x4f,
	0xb2, 0x5e, 0x48, 0x7d, 0xc9, 0x2f, 0x49, 0xbe, 0xac, 0x90, 0x77, 0x64, 0xbc, 0xd1, 0x86, 0x15,
	0x95, 0x41, 0xc7, 0xe3, 0x03, 0x99, 0xc5, 0x13, 0x58, 0x88, 0x84, 0x2b, 0x91, 0x44, 0xa5, 0x51,
	0xa9, 0x4f, 0x13, 0xb4, 0x25, 0x21, 0xc2, 0xf5, 0x82, 0x80, 0x91, 0x34, 0x75, 0x23, 0xab, 0x50,
	0x2b, 0x8a, 0x70, 0x35, 0xd0, 0xde, 0xf8, 0x53, 0x11, 0x4a, 0xfb, 0x31, 0x8d, 0xa4, 0x29, 0x91,
	0x58, 0x4c, 0x23, 0x37, 0xf2, 0x86, 0xc2, 0x9e, 0xb1, 0x59, 0xb6, 0x4b, 0x02, 0x68, 0x7b, 0x43,
	0x82, 0x9f, 0x41, 0x55, 0x92, 0xe9, 0x20, 0x66, 0xdc, 0xcf, 0x44, 0x65, 0x84, 0x80, 0x29, 0xc0,
	0xae, 0xc6, 0xf0, 0x73, 0x30, 0x73, 0x5f, 0xa2, 0x15, 0x56, 0xb1, 0x66, 0x6c, 0x56, 0x77, 0x8c,
	0x2f, 0xed, 0x8a, 0x86, 0x73, 0x3f, 0x43, 0x6f, 0x74, 0x4e, 0x88, 0x7b, 0xd1, 0xb3, 0x16, 0x6a,
	0xc6, 0xe6, 0x82, 0x5d, 0x52, 0xc0, 0xbb, 0x1e, 0xfe, 0x21, 0xac, 0xcd, 0x9a, 0x70, 0x93, 0x46,
	0x3a, 0x90, 0x75, 0xaa, 0xee, 0x18, 0xaf, 0xec, 0xd5, 0x19, 0x3b, 0x9d, 0x46, 0x3a, 0xc0, 0x0d,
	0xb8, 0x9f, 0xd2, 0x7e, 0x44, 0x02, 0x77, 0x48, 0xd2, 0xd4, 0xeb, 0x13, 0x77, 0x40, 0xbc, 0x80,
	0x30, 0xab, 0x24, 0xc3, 0xbb, 0xab, 0xc8, 0x63, 0xc5, 0x1d, 0x49, 0x0a, 0xbf, 0x00, 0x18, 0x25,
	0x59, 0xcf, 0x1d, 0x7a, 0x7d, 0xea, 0x5b, 0x65, 0x69, 0xbb, 0xf4, 0x7a, 0xfb, 0xcb, 0xed, 0xd7,
	0x5f, 0xbf, 0xfa, 0x91, 0x5d, 0x16, 0xdc, 0xb1, 0xa0, 0x94, 0x20, 0xbb, 0xd4, 0x82, 0x30, 0x15,
	0xdc, 0x6e, 0xbc, 0xde, 0x16, 0x82, 0xec, 0x52, 0x09, 0x3e, 0x80, 0xa5, 0x94, 0xf4, 0x3f, 0x52,
	0x6e, 0x55, 0x6a, 0xc6, 0x66, 0xc9, 0xd6, 0x27, 0x81, 0x9f, 0xc7, 0xec, 0x82, 0x06, 0x96, 0x29,
	0x94, 0x6d, 0x7d, 0xc2, 0x4f, 0xc1, 0x3c, 0x8f, 0x99, 0x4f, 0xdc, 0x1e, 0x4d, 0xbe, 0x7a, 0xf9,
	0xb5, 0x55, 0x95, 0x5a, 0x15, 0x89, 0xed, 0x49, 0x68, 0x23, 0x05, 0xeb, 0x38, 0x0b, 0x39, 0x4d,
	0x69, 0xdf, 0x26, 0x01, 0x21, 0xc3, 0xae, 0x1c, 0x66, 0x59, 0xc0, 0x1f, 0xc0, 0x72, 0x92, 0xf5,
	0x2e, 0xc8, 0x38, 0xb5, 0x8c, 0x5a, 0x71, 0xb3, 0xd2, 0x58, 0xad, 0xcf, 0x4f, 0x85, 0x9d, 0xf3,
	0xf8, 0x0b, 0x00, 0x51, 0x02, 0x8f, 0x67, 0x8c, 0xa4, 0xb2, 0xfd, 0xa6, 0x3d, 0x83, 0x60, 0x13,
	0x8c, 0xa1, 0x6a, 0x93, 0x6d, 0x0c, 0x37, 0xfe, 0x58, 0x84, 0x8a, 0x33, 0x6a, 0x45, 0x49, 0xc6,
	0xf3, 0x4e, 0x4d, 0x67, 0xc7, 0x98, 0x9f, 0x1d, 0x41, 0x26, 0x8c, 0x5c, 0xba, 0x03, 0x2f, 0x1d,
	0xc8, 0x3d, 0x31, 0xed, 0x92, 0x00, 0x8e, 0xbc, 0x74, 0x20, 0xe7, 0x58, 0x90, 0x34, 0x0a, 0xc8,
	0x48, 0x6f, 0x89, 0x14, 0x6f, 0x09, 0x40, 0xd0, 0x6a, 0x39, 0xdd, 0x94, 0xf6, 0xe5, 0x0c, 0x98,
	0x76, 0x59, 0x21, 0x5d, 0xda, 0xc7, 0xdf, 0x87, 0x52, 0x4a, 0x7e, 0x99, 0x91, 0xc8, 0x27, 0xba,
	0xf7, 0xf0, 0xb2, 0xf1, 0xe6, 0xe5, 0x9b, 0xed, 0xd7, 0x8d, 0x37, 0xaf, 0xec, 0x09, 0x87, 0x7f,
	0x06, 0x15, 0x6d, 0x46, 0x8e, 0x9b, 0x58, 0x97, 0x95, 0x06, 0xaa, 0xcb, 0x04, 0xa6, 0xf5, 0xda,
	0x31, 0xbb, 0x9d, 0x66, 0xfb, 0x60, 0xf7, 0xe0, 0xc0, 0x6e, 0x76, 0xbb, 0xb6, 0xf6, 0x2c, 0x13,
	0x7c, 0x05, 0xa5, 0xa1, 0xae, 0xb2, 0xb5, 0x5c, 0x33, 0x36, 0x2b, 0x8d, 0x87, 0xf5, 0x9b, 0xca,
	0x6e, 0x4f, 0x44, 0x45, 0x5f, 0xbd, 0x61, 0x9c, 0x45, 0x5c, 0x8e, 0xd9, 0x82, 0xad, 0x4f, 0x62,
	0xbd, 0x03, 0xe2, 0x33, 0x12, 0xb8, 0x9c, 0x11, 0xa2, 0x46, 0xcb, 0x06, 0x05, 0x39, 0x8c, 0x10,
	0x31, 0xae, 0x5a, 0x40, 0xc7, 0x7d, 0x49, 0x58, 0x4a, 0xe3, 0x48, 0x0d, 0x97, 0x7d, 0x57, 0x91,
	0xca, 0xe7, 0x37, 0x8a, 0xda, 0xf8, 0x73, 0x01, 0x4c, 0x67, 0x74, 0x92, 0xf1, 0xbc, 0x2b, 0x16,
	0x2c, 0xeb, 0x26, 0xe8, 0x2d, 0xcd, 0x8f, 0xff, 0x77, 0xd7, 0x67, 0x82, 0x16, 0xed, 0x98, 0x06,
	0xdd, 0x98, 0x2f, 0xa2, 0xb8, 0xb3, 0x56, 0x1a, 0x6b, 0x75, 0xe5, 0x70, 0x26, 0xfd, 0x9b, 0xea,
	0xb6, 0x78, 0xfb, 0xba, 0x3d, 0x87, 0x95, 0x38, 0x71, 0x19, 0xe1, 0x19, 0x8b, 0xdc, 0xc0, 0xe3,
	0x9e, 0xbe, 0xe1, 0xcc, 0x38, 0xb1, 0x25, 0x78, 0xe0, 0x71, 0xef, 0xe6, 0x22, 0x2d, 0xdf, 0x5c,
	0xa4, 0x5f, 0x1b, 0xb0, 0x9a, 0x17, 0x69, 0x4f, 0xdf, 0x67, 0xd3, 0x84, 0x8d, 0xb9, 0x84, 0x9f,
	0x41, 0x55, 0x1b, 0x56, 0x5b, 0xa2, 0x87, 0xd7, 0x54, 0x60, 0x47, 0x62, 0x37, 0x07, 0x51, 0xbc,
	0x39, 0x88, 0xff, 0x16, 0x60, 0xd5, 0x61, 0x5e, 0x94, 0x7a, 0x3e, 0xa7, 0x71, 0x94, 0x37, 0x2b,
	0xd7, 0x34, 0xa4, 0x66, 0x7e, 0xc4, 0xcf, 0x61, 0x89, 0x8a, 0x41, 0x55, 0x6b, 0x59, 0x69, 0x98,
	0xf5, 0x99, 0xd5, 0xb3, 0x35, 0x87, 0xbf, 0x82, 0x4a, 0x8f, 0x46, 0x6e, 0x2c, 0x33, 0x4b, 0xad,
	0xa2, 0x14, 0x45, 0xf5, 0x2b, 0xb9, 0xda, 0xd0, 0xa3, 0x91, 0x42, 0x52, 0xfc, 0x02, 0x96, 0x73,
	0xf1, 0x45, 0x29, 0x5e, 0xad, 0xcf, 0xce, 0x8f, 0x9d, 0xb3, 0x62, 0x5c, 0xc2, 0xd8, 0xbf, 0x70,
	0x39, 0x1d, 0x12, 0xb9, 0x84, 0x55, 0xbb, 0x24, 0x00, 0x87, 0x0e, 0x89, 0x58, 0x51, 0x15, 0x82,
	0xeb, 0x47, 0x5c, 0xf6, 0xa9, 0x6a, 0x97, 0x15, 0xb2, 0xaf, 0x46, 0x5d, 0x9b, 0x91, 0xbc, 0x6a,
	0x0d, 0x68, 0x48, 0x08, 0x3c, 0x06, 0x20, 0x23, 0xce, 0x3c, 0xd5, 0xe7, 0x92, 0x5a, 0x71, 0x89,
	0xc8, 0x26, 0x3f, 0x87, 0x95, 0x29, 0xed, 0x86, 0x24, 0xd2, 0xdb, 0x62, 0x4e, 0x44, 0xde, 0x93,
	0x48, 0xb4, 0x4a, 0x77, 0x81, 0x8c, 0x12, 0xca, 0xc6, 0x7a, 0x4f, 0x4c, 0x05, 0x36, 0x25, 0xb6,
	0xf1, 0x17, 0x03, 0xee, 0x39, 0x23, 0x5b, 0x5c, 0x0a, 0x29, 0x3f, 0x20, 0xdc, 0xa3, 0xa1, 0x7a,
	0x68, 0x9e, 0x41, 0x95, 0x29, 0x54, 0xdf, 0x43, 0xaa, 0x03, 0xa6, 0x06, 0xd5, 0x55, 0xb4, 0x0e,
	0xcb, 0x7c, 0x94, 0x5f, 0x62, 0x22, 0xc8, 0x25, 0x3e, 0x92, 0x57, 0xd8, 0xf5, 0x08, 0x8b, 0x9f,
	0x88, 0x70, 0x0b, 0xd6, 0x66, 0xa4, 0xe2, 0xf3, 0xf3, 0x94, 0x70, 0x5d, 0xcb, 0xd5, 0x89, 0xe0,
	0x89, 0x84, 0x37, 0x7e, 0x63, 0xc0, 0xfa, 0x24, 0xd0, 0x2e, 0x61, 0xd4, 0x0b, 0xe9, 0x77, 0x24,
	0x90, 0xb1, 0xbe, 0x80, 0xd5, 0xc9, 0xb5, 0x3c, 0x17, 0xed, 0xca, 0x04, 0x56, 0xf1, 0x3e, 0x82,
	0xf2, 0x04, 0xd1, 0x11, 0x4f, 0x01, 0x39, 0xdb, 0x13, 0xc3, 0x2e, 0x1f, 0xc9, 0x98, 0xc5, 0x6c,
	0x4f, 0xbd, 0x8d, 0x36, 0xfe, 0x60, 0x80, 0xd9, 0x0a, 0x48, 0xc4, 0x29, 0x1f, 0xe7, 0x7f, 0x85,
	0xe4, 0x5f, 0x24, 0x7d, 0x9f, 0xa8, 0x03, 0xc6, 0xb0, 0x90, 0xa5, 0x84, 0xe9, 0x97, 0x5e, 0xfe,
	0x16, 0xd8, 0x20, 0x4e, 0xb9, 0x34, 0x5b, 0xb6, 0xe5, 0x6f, 0x81, 0x25, 0x31, 0x53, 0x59, 0x97,
	0x6d, 0xf9, 0x5b, 0x62, 0x1e, 0x57, 0x2f, 0xb7, 0xc0, 0x3c, 0x3e, 0xc0, 0xeb, 0xb0, 0xa8, 0x12,
	0x5b, 0xca, 0xff, 0x16, 0xa8, 0xf3, 0xd6, 0xef, 0x8b, 0x50, 0x39, 0xf4, 0x68, 0x98, 0x31, 0xf5,
	0xcf, 0xec, 0x31, 0x3c, 0xd4, 0x47, 0xf7, 0x34, 0x22, 0xa3, 0x84, 0xf8, 0x7c, 0xf2, 0x86, 0x23,
	0x03, 0x7f, 0x06, 0x0f, 0x72, 0x7a, 0x2f, 0xe3, 0x3c, 0x8e, 0x9a, 0x5a, 0x04, 0x15, 0xf0, 0x7d,
	0x58, 0xcb, 0x39, 0x51, 0xf8, 0x26, 0x63, 0x31, 0x43, 0x45, 0xfc, 0x39, 0xac, 0xe7, 0xf0, 0xae,
	0xdc, 0xcd, 0x7d, 0x2f, 0xf2, 0x49, 0x18, 0x92, 0x00, 0x2d, 0xe0, 0x75, 0xb8, 0x9b, 0x93, 0x1d,
	0x3a, 0x35, 0xb6, 0x88, 0x2d, 0xb8, 0x37, 0x43, 0x4c, 0x55, 0x96, 0xf0, 0x03, 0xc0, 0x33, 0x4c,
	0x2b, 0xba, 0xf4, 0x42, 0x1a, 0xa0, 0x65, 0xfc, 0x08, 0xac, 0x1c, 0xd7, 0x60, 0x37, 0x6f, 0x0d,
	0x2a, 0xcd, 0xd9, 0x63, 0xb1, 0x4f, 0xd2, 0x54, 0xc5, 0x57, 0x9e, 0x4d, 0xa9, 0x1d, 0xf3, 0x66,
	0x14, 0x67, 0xfd, 0xc1, 0x61, 0x16, 0x05, 0x29, 0x82, 0x2b, 0x5c, 0x2b, 0xa2, 0x5c, 0x77, 0x12,
	0x55, 0xae, 0x84, 0x7e, 0x4c, 0xd3, 0xa1, 0xc7, 0xfd, 0x01, 0x32, 0x67, 0x4b, 0xb8, 0xab, 0x1e,
	0x80, 0xb7, 0x24, 0x22, 0xcc, 0x13, 0xb9, 0xa3, 0x2a, 0x7e, 0x08, 0xf7, 0x73, 0xfa, 0x90, 0xb2,
	0xe1, 0x47, 0x8f, 0x11, 0x15, 0x8a, 0xbf, 0xf5, 0x3b, 0x03, 0xd0, 0xd5, 0xbb, 0x1f, 0x23, 0x30,
	0x3b, 0xbb, 0xbf, 0x70, 0x4e, 0xf4, 0x1b, 0x8a, 0xee, 0xe0, 0xbb, 0xb0, 0x2a, 0x91, 0xee, 0xbe,
	0xdd, 0xea, 0x38, 0x47, 0xbb, 0xdd, 0x23, 0x64, 0xe0, 0x35, 0xa8, 0x4a, 0xf0, 0xf8, 0xf4, 0xbd,
	0xd3, 0xea, 0xb6, 0xde, 0xa2, 0xc2, 0x04, 0x3a, 0xe9, 0xd8, 0x4d, 0xe7, 0xd4, 0x6e, 0xa3, 0xe2,
	0xc4, 0xd8, 0x87, 0x96, 0xd3, 0x16, 0xc6, 0x16, 0xf0, 0x3d, 0x40, 0x12, 0xe9, 0x34, 0xba, 0x47,
	0x39, 0xba, 0xb8, 0x15, 0xc2, 0xea, 0x95, 0x97, 0x5c, 0xa8, 0xce, 0xbe, 0xe5, 0xe8, 0x8e, 0xb0,
	0x2f, 0x91, 0x89, 0x4b, 0x03, 0x9b, 0x50, 0x6a, 0x9e, 0x39, 0x4d, 0xbb, 0xbd, 0xfb, 0x1e, 0x15,
	0x26, 0x2a, 0xb9, 0xdd, 0xa2, 0xf0, 0x26, 0x91, 0x59, 0x6f, 0x0b, 0x5b, 0xa7, 0x50, 0xd1, 0x9b,
	0x29, 0x3d, 0x55, 0x60, 0xd9, 0x39, 0x6b, 0xb5, 0x3b, 0xa7, 0x0e, 0xba, 0x23, 0x2c, 0x3a, 0x67,
	0x27, 0xa7, 0x8e, 0x38, 0x19, 0x18, 0x60, 0xc9, 0x39, 0x3b, 0x6e, 0x3a, 0xbb, 0xa8, 0x80, 0x57,
	0x00, 0x9c, 0xb3, 0xc3, 0x56, 0xbb, 0xd5, 0x3d, 0x6a, 0x1e, 0xa0, 0x22, 0x5e, 0x85, 0x8a, 0x73,
	0xd6, 0x3c, 0x73, 0xec, 0xdd, 0x83, 0x5d, 0x67, 0x17, 0x2d, 0x6c, 0xfd, 0xad, 0x08, 0x6b, 0x6a,
	0x4a, 0x67, 0xad, 0xaf, 0xc3, 0xdd, 0x39, 0xd0, 0x3d, 0xe1, 0x03, 0xc2, 0x90, 0x81, 0x37, 0xe0,
	0x8b, 0x79, 0xe2, 0x90, 0x90, 0x93, 0x4b, 0xc2, 0x9c, 0x01, 0x23, 0xe9, 0x20, 0x0e, 0xc5, 0x8c,
	0x3f, 0x81, 0xcf, 0xe7, 0x65, 0xf6, 0xe3, 0xe8, 0x9c, 0xb2, 0xa1, 0xea, 0x1a, 0x2a, 0x8a, 0xe6,
	0xcf, 0x0b, 0xd8, 0x24, 0x25, 0xfc, 0x80, 0x5c, 0x52, 0x9f, 0xa0, 0x85, 0xeb, 0xb4, 0xd6, 0xff,
	0x10, 0x33, 0x31, 0xf5, 0x8f, 0xc0, 0x9a, 0xa7, 0x3f, 0xd0, 0x84, 0x68, 0xe5, 0xa5, 0xeb, 0xca,
	0x1d, 0x16, 0x73, 0xe2, 0xf3, 0x7d, 0x2f, 0x0c, 0xd1, 0xb2, 0x18, 0xf1, 0x79, 0x5a, 0xcc, 0xbf,
	0x33, 0x42, 0xa5, 0xeb, 0x51, 0xe7, 0x83, 0xb7, 0x3f, 0x20, 0xfe, 0x05, 0x2a, 0x8b, 0x99, 0x9c,
	0x17, 0xd0, 0x83, 0x8b, 0x40, 0xac, 0xef, 0x15, 0xa7, 0xf9, 0x17, 0x11, 0xaa, 0xe0, 0x67, 0xf0,
	0x64, 0x9e, 0x3c, 0x8e, 0xc8, 0x30, 0x8e, 0xa8, 0x2f, 0xf2, 0xd9, 0x17, 0x2f, 0x3e, 0x32, 0xaf,
	0x7b, 0xcf, 0x85, 0xe4, 0x84, 0xa1, 0x2a, 0xae, 0xc1, 0xa3, 0x2b, 0x2e, 0xbc, 0x34, 0x4d, 0x06,
	0xcc, 0x4b, 0xe5, 0x9d, 0x84, 0x56, 0xb6, 0x7e, 0x05, 0xf7, 0xc4, 0x8e, 0x79, 0x9c, 0xd1, 0xd1,
	0x6c, 0x2f, 0x6b, 0xf0, 0xe8, 0x53, 0xb8, 0xbb, 0x9f, 0x31, 0x46, 0x22, 0x8e, 0x0c, 0xfc, 0x14,
	0x1e, 0x7f, 0x52, 0xa2, 0x4d, 0x3e, 0x1e, 0x52, 0x96, 0x72, 0x54, 0x10, 0x7d, 0xbf, 0x49, 0xa4,
	0x4b, 0xfc, 0x38, 0x0a, 0x50, 0x71, 0xeb, 0x5b, 0xc0, 0x36, 0xf1, 0xe3, 0x4b, 0xc2, 0xc6, 0xaa,
	0x1d, 0xd2, 0xfd, 0xf7, 0xe0, 0xe9, 0x75, 0xd4, 0xed, 0xfa, 0xcc, 0x1b, 0xf6, 0x42, 0x12, 0x88,
	0x22, 0xa4, 0xe8, 0x8e, 0xe8, 0xdb, 0x27, 0xc4, 0x94, 0x43, 0x64, 0x6c, 0x9d, 0xc3, 0xaa, 0x90,
	0x9c, 0xcd, 0xeb, 0x21, 0xdc, 0xbf, 0x02, 0xb9, 0x9d, 0xd0, 0xa3, 0x11, 0xba, 0x23, 0xfa, 0x71,
	0x95, 0x52, 0x96, 0xde, 0x20, 0xe3, 0x66, 0x72, 0x1b, 0x15, 0xb6, 0x0e, 0x00, 0x77, 0x2f, 0xc6,
	0xe2, 0xa3, 0x71, 0x77, 0xe6, 0x8b, 0xf0, 0x01, 0xe0, 0x99, 0xa3, 0x16, 0x40, 0xc6, 0x15, 0x7c,
	0x8f, 0x72, 0x89, 0x17, 0x76, 0x7e, 0x02, 0xcb, 0x1f, 0xa9, 0x7c, 0x27, 0xf1, 0xd3, 0x7a, 0x3f,
	0x8e, 0xfb, 0x21, 0x51, 0xdf, 0xf8, 0xbd, 0xec, 0xbc, 0xde, 0x8c, 0xb2, 0xe1, 0x37, 0x5e, 0x98,
	0x91, 0x93, 0x44, 0xdc, 0x76, 0xa9, 0xf5, 0xf7, 0xdf, 0x16, 0xd5, 0x57, 0x99, 0xd0, 0x69, 0x45,
	0x3b, 0x3f, 0x85, 0x92, 0xd4, 0x8e, 0x33, 0x7e, 0x1b, 0xf5, 0x7f, 0x68, 0x75, 0xe9, 0xf2, 0x24,
	0xe3, 0x3b, 0x6f, 0xa1, 0x2a, 0xf5, 0x03, 0xd2, 0xcb, 0xfa, 0xb7, 0x8c, 0xe1, 0x9f, 0xda, 0x48,
	0x45, 0x68, 0x1e, 0x08, 0xc5, 0x56, 0xb4, 0xd3, 0x82, 0x95, 0x19, 0x43, 0xb7, 0x0c, 0xe7, 0x5f,
	0xda, 0x92, 0x39, 0xb1, 0x24, 0x62, 0xfa, 0x39, 0x94, 0xa5, 0x29, 0x4e, 0xa3, 0xf1, 0x6d, 0xac,
	0xfc, 0x5b, 0x5b, 0x91, 0x95, 0x70, 0x68, 0x34, 0xde, 0x79, 0x0f, 0xab, 0xd2, 0x42, 0x2f, 0x8e,
	0x79, 0x18, 0xcb, 0x0f, 0xe5, 0x5b, 0xd8, 0xf9, 0x8f, 0xb6, 0x23, 0x13, 0xd9, 0x9b, 0xa8, 0xee,
	0xfd, 0x18, 0x9e, 0xf9, 0xf1, 0xb0, 0x9e, 0x7a, 0x3c, 0x4e, 0x07, 0x34, 0xf4, 0x7a, 0x69, 0x9d,
	0x33, 0xf2, 0x5d, 0xcc, 0xea, 0x21, 0xed, 0x4d, 0xec, 0xed, 0x81, 0x23, 0x41, 0xd1, 0xdd, 0x6f,
	0x4b, 0xfa, 0x0b, 0x3e, 0xfd, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x70, 0x41, 0xaf, 0xc8,
	0x11, 0x00, 0x00,
}
