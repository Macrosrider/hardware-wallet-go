// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messages.proto

/*
Package messages is a generated protocol buffer package.

It is generated from these files:
	messages.proto
	types.proto
	descriptor.proto

It has these top-level messages:
	Initialize
	GetFeatures
	Features
	ApplySettings
	GenerateMnemonic
	SetMnemonic
	ChangePin
	SkycoinAddress
	ResponseSkycoinAddress
	SkycoinCheckMessageSignature
	SkycoinSignMessage
	ResponseSkycoinSignMessage
	Ping
	Success
	Failure
	ButtonRequest
	ButtonAck
	PinMatrixRequest
	PinMatrixAck
	Cancel
	PassphraseRequest
	PassphraseAck
	PassphraseStateRequest
	PassphraseStateAck
	GetEntropy
	GetVersion
	Entropy
	WipeDevice
	LoadDevice
	ResetDevice
	BackupDevice
	EntropyRequest
	EntropyAck
	RecoveryDevice
	WordRequest
	WordAck
	FirmwareErase
	FirmwareRequest
	FirmwareUpload
	HDNodeType
	HDNodePathType
	CoinType
	MultisigRedeemScriptType
	TxInputType
	TxOutputType
	TxOutputBinType
	TransactionType
	TxRequestDetailsType
	TxRequestSerializedType
	IdentityType
	FileDescriptorSet
	FileDescriptorProto
	DescriptorProto
	FieldDescriptorProto
	OneofDescriptorProto
	EnumDescriptorProto
	EnumValueDescriptorProto
	ServiceDescriptorProto
	MethodDescriptorProto
	FileOptions
	MessageOptions
	FieldOptions
	EnumOptions
	EnumValueOptions
	ServiceOptions
	MethodOptions
	UninterpretedOption
	SourceCodeInfo
*/
package messages

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// *
// Mapping between Trezor wire identifier (uint) and a protobuf message
type MessageType int32

const (
	MessageType_MessageType_Initialize MessageType = 0
	MessageType_MessageType_Ping       MessageType = 1
	MessageType_MessageType_Success    MessageType = 2
	MessageType_MessageType_Failure    MessageType = 3
	MessageType_MessageType_ChangePin  MessageType = 4
	MessageType_MessageType_WipeDevice MessageType = 5
	// Bootloader
	MessageType_MessageType_FirmwareErase                MessageType = 6
	MessageType_MessageType_FirmwareUpload               MessageType = 7
	MessageType_MessageType_GetEntropy                   MessageType = 9
	MessageType_MessageType_Entropy                      MessageType = 10
	MessageType_MessageType_LoadDevice                   MessageType = 13
	MessageType_MessageType_ResetDevice                  MessageType = 14
	MessageType_MessageType_Features                     MessageType = 17
	MessageType_MessageType_PinMatrixRequest             MessageType = 18
	MessageType_MessageType_PinMatrixAck                 MessageType = 19
	MessageType_MessageType_Cancel                       MessageType = 20
	MessageType_MessageType_ApplySettings                MessageType = 25
	MessageType_MessageType_ButtonRequest                MessageType = 26
	MessageType_MessageType_ButtonAck                    MessageType = 27
	MessageType_MessageType_BackupDevice                 MessageType = 34
	MessageType_MessageType_EntropyRequest               MessageType = 35
	MessageType_MessageType_EntropyAck                   MessageType = 36
	MessageType_MessageType_PassphraseRequest            MessageType = 41
	MessageType_MessageType_PassphraseAck                MessageType = 42
	MessageType_MessageType_GetFeatures                  MessageType = 55
	MessageType_MessageType_PassphraseStateRequest       MessageType = 77
	MessageType_MessageType_PassphraseStateAck           MessageType = 78
	MessageType_MessageType_RecoveryDevice               MessageType = 45
	MessageType_MessageType_WordRequest                  MessageType = 46
	MessageType_MessageType_WordAck                      MessageType = 47
	MessageType_MessageType_SetMnemonic                  MessageType = 113
	MessageType_MessageType_SkycoinAddress               MessageType = 114
	MessageType_MessageType_SkycoinCheckMessageSignature MessageType = 115
	MessageType_MessageType_SkycoinSignMessage           MessageType = 116
	MessageType_MessageType_ResponseSkycoinAddress       MessageType = 117
	MessageType_MessageType_ResponseSkycoinSignMessage   MessageType = 118
	MessageType_MessageType_GenerateMnemonic             MessageType = 119
	MessageType_MessageType_GetVersion                   MessageType = 120
)

var MessageType_name = map[int32]string{
	0:   "MessageType_Initialize",
	1:   "MessageType_Ping",
	2:   "MessageType_Success",
	3:   "MessageType_Failure",
	4:   "MessageType_ChangePin",
	5:   "MessageType_WipeDevice",
	6:   "MessageType_FirmwareErase",
	7:   "MessageType_FirmwareUpload",
	9:   "MessageType_GetEntropy",
	10:  "MessageType_Entropy",
	13:  "MessageType_LoadDevice",
	14:  "MessageType_ResetDevice",
	17:  "MessageType_Features",
	18:  "MessageType_PinMatrixRequest",
	19:  "MessageType_PinMatrixAck",
	20:  "MessageType_Cancel",
	25:  "MessageType_ApplySettings",
	26:  "MessageType_ButtonRequest",
	27:  "MessageType_ButtonAck",
	34:  "MessageType_BackupDevice",
	35:  "MessageType_EntropyRequest",
	36:  "MessageType_EntropyAck",
	41:  "MessageType_PassphraseRequest",
	42:  "MessageType_PassphraseAck",
	55:  "MessageType_GetFeatures",
	77:  "MessageType_PassphraseStateRequest",
	78:  "MessageType_PassphraseStateAck",
	45:  "MessageType_RecoveryDevice",
	46:  "MessageType_WordRequest",
	47:  "MessageType_WordAck",
	113: "MessageType_SetMnemonic",
	114: "MessageType_SkycoinAddress",
	115: "MessageType_SkycoinCheckMessageSignature",
	116: "MessageType_SkycoinSignMessage",
	117: "MessageType_ResponseSkycoinAddress",
	118: "MessageType_ResponseSkycoinSignMessage",
	119: "MessageType_GenerateMnemonic",
	120: "MessageType_GetVersion",
}
var MessageType_value = map[string]int32{
	"MessageType_Initialize":                   0,
	"MessageType_Ping":                         1,
	"MessageType_Success":                      2,
	"MessageType_Failure":                      3,
	"MessageType_ChangePin":                    4,
	"MessageType_WipeDevice":                   5,
	"MessageType_FirmwareErase":                6,
	"MessageType_FirmwareUpload":               7,
	"MessageType_GetEntropy":                   9,
	"MessageType_Entropy":                      10,
	"MessageType_LoadDevice":                   13,
	"MessageType_ResetDevice":                  14,
	"MessageType_Features":                     17,
	"MessageType_PinMatrixRequest":             18,
	"MessageType_PinMatrixAck":                 19,
	"MessageType_Cancel":                       20,
	"MessageType_ApplySettings":                25,
	"MessageType_ButtonRequest":                26,
	"MessageType_ButtonAck":                    27,
	"MessageType_BackupDevice":                 34,
	"MessageType_EntropyRequest":               35,
	"MessageType_EntropyAck":                   36,
	"MessageType_PassphraseRequest":            41,
	"MessageType_PassphraseAck":                42,
	"MessageType_GetFeatures":                  55,
	"MessageType_PassphraseStateRequest":       77,
	"MessageType_PassphraseStateAck":           78,
	"MessageType_RecoveryDevice":               45,
	"MessageType_WordRequest":                  46,
	"MessageType_WordAck":                      47,
	"MessageType_SetMnemonic":                  113,
	"MessageType_SkycoinAddress":               114,
	"MessageType_SkycoinCheckMessageSignature": 115,
	"MessageType_SkycoinSignMessage":           116,
	"MessageType_ResponseSkycoinAddress":       117,
	"MessageType_ResponseSkycoinSignMessage":   118,
	"MessageType_GenerateMnemonic":             119,
	"MessageType_GetVersion":                   120,
}

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}
func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (x *MessageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MessageType_value, data, "MessageType")
	if err != nil {
		return err
	}
	*x = MessageType(value)
	return nil
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// *
// Request: Reset device to default state and ask for device details
// @next Features
type Initialize struct {
	State            []byte `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Initialize) Reset()                    { *m = Initialize{} }
func (m *Initialize) String() string            { return proto.CompactTextString(m) }
func (*Initialize) ProtoMessage()               {}
func (*Initialize) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Initialize) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

// *
// Request: Ask for device details (no device reset)
// @next Features
type GetFeatures struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetFeatures) Reset()                    { *m = GetFeatures{} }
func (m *GetFeatures) String() string            { return proto.CompactTextString(m) }
func (*GetFeatures) ProtoMessage()               {}
func (*GetFeatures) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// *
// Response: Reports various information about the device
// @prev Initialize
// @prev GetFeatures
type Features struct {
	Vendor               *string `protobuf:"bytes,1,opt,name=vendor" json:"vendor,omitempty"`
	MajorVersion         *uint32 `protobuf:"varint,2,opt,name=major_version,json=majorVersion" json:"major_version,omitempty"`
	MinorVersion         *uint32 `protobuf:"varint,3,opt,name=minor_version,json=minorVersion" json:"minor_version,omitempty"`
	PatchVersion         *uint32 `protobuf:"varint,4,opt,name=patch_version,json=patchVersion" json:"patch_version,omitempty"`
	BootloaderMode       *bool   `protobuf:"varint,5,opt,name=bootloader_mode,json=bootloaderMode" json:"bootloader_mode,omitempty"`
	DeviceId             *string `protobuf:"bytes,6,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	PinProtection        *bool   `protobuf:"varint,7,opt,name=pin_protection,json=pinProtection" json:"pin_protection,omitempty"`
	PassphraseProtection *bool   `protobuf:"varint,8,opt,name=passphrase_protection,json=passphraseProtection" json:"passphrase_protection,omitempty"`
	Language             *string `protobuf:"bytes,9,opt,name=language" json:"language,omitempty"`
	Label                *string `protobuf:"bytes,10,opt,name=label" json:"label,omitempty"`
	Initialized          *bool   `protobuf:"varint,12,opt,name=initialized" json:"initialized,omitempty"`
	BootloaderHash       []byte  `protobuf:"bytes,14,opt,name=bootloader_hash,json=bootloaderHash" json:"bootloader_hash,omitempty"`
	PinCached            *bool   `protobuf:"varint,16,opt,name=pin_cached,json=pinCached" json:"pin_cached,omitempty"`
	PassphraseCached     *bool   `protobuf:"varint,17,opt,name=passphrase_cached,json=passphraseCached" json:"passphrase_cached,omitempty"`
	FirmwarePresent      *bool   `protobuf:"varint,18,opt,name=firmware_present,json=firmwarePresent" json:"firmware_present,omitempty"`
	NeedsBackup          *bool   `protobuf:"varint,19,opt,name=needs_backup,json=needsBackup" json:"needs_backup,omitempty"`
	Model                *string `protobuf:"bytes,21,opt,name=model" json:"model,omitempty"`
	FwMajor              *uint32 `protobuf:"varint,22,opt,name=fw_major,json=fwMajor" json:"fw_major,omitempty"`
	FwMinor              *uint32 `protobuf:"varint,23,opt,name=fw_minor,json=fwMinor" json:"fw_minor,omitempty"`
	FwPatch              *uint32 `protobuf:"varint,24,opt,name=fw_patch,json=fwPatch" json:"fw_patch,omitempty"`
	FwVendor             *string `protobuf:"bytes,25,opt,name=fw_vendor,json=fwVendor" json:"fw_vendor,omitempty"`
	FwVendorKeys         []byte  `protobuf:"bytes,26,opt,name=fw_vendor_keys,json=fwVendorKeys" json:"fw_vendor_keys,omitempty"`
	UnfinishedBackup     *bool   `protobuf:"varint,27,opt,name=unfinished_backup,json=unfinishedBackup" json:"unfinished_backup,omitempty"`
	XXX_unrecognized     []byte  `json:"-"`
}

func (m *Features) Reset()                    { *m = Features{} }
func (m *Features) String() string            { return proto.CompactTextString(m) }
func (*Features) ProtoMessage()               {}
func (*Features) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Features) GetVendor() string {
	if m != nil && m.Vendor != nil {
		return *m.Vendor
	}
	return ""
}

func (m *Features) GetMajorVersion() uint32 {
	if m != nil && m.MajorVersion != nil {
		return *m.MajorVersion
	}
	return 0
}

func (m *Features) GetMinorVersion() uint32 {
	if m != nil && m.MinorVersion != nil {
		return *m.MinorVersion
	}
	return 0
}

func (m *Features) GetPatchVersion() uint32 {
	if m != nil && m.PatchVersion != nil {
		return *m.PatchVersion
	}
	return 0
}

func (m *Features) GetBootloaderMode() bool {
	if m != nil && m.BootloaderMode != nil {
		return *m.BootloaderMode
	}
	return false
}

func (m *Features) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

func (m *Features) GetPinProtection() bool {
	if m != nil && m.PinProtection != nil {
		return *m.PinProtection
	}
	return false
}

func (m *Features) GetPassphraseProtection() bool {
	if m != nil && m.PassphraseProtection != nil {
		return *m.PassphraseProtection
	}
	return false
}

func (m *Features) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return ""
}

func (m *Features) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *Features) GetInitialized() bool {
	if m != nil && m.Initialized != nil {
		return *m.Initialized
	}
	return false
}

func (m *Features) GetBootloaderHash() []byte {
	if m != nil {
		return m.BootloaderHash
	}
	return nil
}

func (m *Features) GetPinCached() bool {
	if m != nil && m.PinCached != nil {
		return *m.PinCached
	}
	return false
}

func (m *Features) GetPassphraseCached() bool {
	if m != nil && m.PassphraseCached != nil {
		return *m.PassphraseCached
	}
	return false
}

func (m *Features) GetFirmwarePresent() bool {
	if m != nil && m.FirmwarePresent != nil {
		return *m.FirmwarePresent
	}
	return false
}

func (m *Features) GetNeedsBackup() bool {
	if m != nil && m.NeedsBackup != nil {
		return *m.NeedsBackup
	}
	return false
}

func (m *Features) GetModel() string {
	if m != nil && m.Model != nil {
		return *m.Model
	}
	return ""
}

func (m *Features) GetFwMajor() uint32 {
	if m != nil && m.FwMajor != nil {
		return *m.FwMajor
	}
	return 0
}

func (m *Features) GetFwMinor() uint32 {
	if m != nil && m.FwMinor != nil {
		return *m.FwMinor
	}
	return 0
}

func (m *Features) GetFwPatch() uint32 {
	if m != nil && m.FwPatch != nil {
		return *m.FwPatch
	}
	return 0
}

func (m *Features) GetFwVendor() string {
	if m != nil && m.FwVendor != nil {
		return *m.FwVendor
	}
	return ""
}

func (m *Features) GetFwVendorKeys() []byte {
	if m != nil {
		return m.FwVendorKeys
	}
	return nil
}

func (m *Features) GetUnfinishedBackup() bool {
	if m != nil && m.UnfinishedBackup != nil {
		return *m.UnfinishedBackup
	}
	return false
}

// *
// Request: change language and/or label of the device
// @start
// @next Success
// @next Failure
type ApplySettings struct {
	Language         *string `protobuf:"bytes,1,opt,name=language" json:"language,omitempty"`
	Label            *string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	UsePassphrase    *bool   `protobuf:"varint,3,opt,name=use_passphrase,json=usePassphrase" json:"use_passphrase,omitempty"`
	Homescreen       []byte  `protobuf:"bytes,4,opt,name=homescreen" json:"homescreen,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ApplySettings) Reset()                    { *m = ApplySettings{} }
func (m *ApplySettings) String() string            { return proto.CompactTextString(m) }
func (*ApplySettings) ProtoMessage()               {}
func (*ApplySettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ApplySettings) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return ""
}

func (m *ApplySettings) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *ApplySettings) GetUsePassphrase() bool {
	if m != nil && m.UsePassphrase != nil {
		return *m.UsePassphrase
	}
	return false
}

func (m *ApplySettings) GetHomescreen() []byte {
	if m != nil {
		return m.Homescreen
	}
	return nil
}

// *
// Request: Ask the device to generate a mnemonic and configure itself with it
// @next Success
type GenerateMnemonic struct {
	PassphraseProtection *bool  `protobuf:"varint,1,opt,name=passphrase_protection,json=passphraseProtection" json:"passphrase_protection,omitempty"`
	XXX_unrecognized     []byte `json:"-"`
}

func (m *GenerateMnemonic) Reset()                    { *m = GenerateMnemonic{} }
func (m *GenerateMnemonic) String() string            { return proto.CompactTextString(m) }
func (*GenerateMnemonic) ProtoMessage()               {}
func (*GenerateMnemonic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GenerateMnemonic) GetPassphraseProtection() bool {
	if m != nil && m.PassphraseProtection != nil {
		return *m.PassphraseProtection
	}
	return false
}

// *
// Request: Send a mnemonic to the device
// @next Success
type SetMnemonic struct {
	Mnemonic         *string `protobuf:"bytes,1,req,name=mnemonic" json:"mnemonic,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SetMnemonic) Reset()                    { *m = SetMnemonic{} }
func (m *SetMnemonic) String() string            { return proto.CompactTextString(m) }
func (*SetMnemonic) ProtoMessage()               {}
func (*SetMnemonic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SetMnemonic) GetMnemonic() string {
	if m != nil && m.Mnemonic != nil {
		return *m.Mnemonic
	}
	return ""
}

// *
// Request: Starts workflow for setting/changing/removing the PIN
// @next ButtonRequest
// @next PinMatrixRequest
type ChangePin struct {
	Remove           *bool  `protobuf:"varint,1,opt,name=remove" json:"remove,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ChangePin) Reset()                    { *m = ChangePin{} }
func (m *ChangePin) String() string            { return proto.CompactTextString(m) }
func (*ChangePin) ProtoMessage()               {}
func (*ChangePin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ChangePin) GetRemove() bool {
	if m != nil && m.Remove != nil {
		return *m.Remove
	}
	return false
}

// *
// Request: Generate a Skycoin or a Bitcoin address from a seed, device sends back the address in a Success message
// @next Failure
// @next ResponseSkycoinAddress
type SkycoinAddress struct {
	AddressN         *uint32 `protobuf:"varint,1,req,name=address_n,json=addressN" json:"address_n,omitempty"`
	StartIndex       *uint32 `protobuf:"varint,2,opt,name=start_index,json=startIndex" json:"start_index,omitempty"`
	ConfirmAddress   *bool   `protobuf:"varint,3,opt,name=confirm_address,json=confirmAddress" json:"confirm_address,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SkycoinAddress) Reset()                    { *m = SkycoinAddress{} }
func (m *SkycoinAddress) String() string            { return proto.CompactTextString(m) }
func (*SkycoinAddress) ProtoMessage()               {}
func (*SkycoinAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SkycoinAddress) GetAddressN() uint32 {
	if m != nil && m.AddressN != nil {
		return *m.AddressN
	}
	return 0
}

func (m *SkycoinAddress) GetStartIndex() uint32 {
	if m != nil && m.StartIndex != nil {
		return *m.StartIndex
	}
	return 0
}

func (m *SkycoinAddress) GetConfirmAddress() bool {
	if m != nil && m.ConfirmAddress != nil {
		return *m.ConfirmAddress
	}
	return false
}

// *
// Response: Return the generated skycoin address
// @prev SkycoinAddress
type ResponseSkycoinAddress struct {
	Addresses        []string `protobuf:"bytes,1,rep,name=addresses" json:"addresses,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ResponseSkycoinAddress) Reset()                    { *m = ResponseSkycoinAddress{} }
func (m *ResponseSkycoinAddress) String() string            { return proto.CompactTextString(m) }
func (*ResponseSkycoinAddress) ProtoMessage()               {}
func (*ResponseSkycoinAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ResponseSkycoinAddress) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

// *
// Request: Check a message signature matches the given address.
// @next Success
type SkycoinCheckMessageSignature struct {
	Address          *string `protobuf:"bytes,1,req,name=address" json:"address,omitempty"`
	Message          *string `protobuf:"bytes,2,req,name=message" json:"message,omitempty"`
	Signature        *string `protobuf:"bytes,3,req,name=signature" json:"signature,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SkycoinCheckMessageSignature) Reset()                    { *m = SkycoinCheckMessageSignature{} }
func (m *SkycoinCheckMessageSignature) String() string            { return proto.CompactTextString(m) }
func (*SkycoinCheckMessageSignature) ProtoMessage()               {}
func (*SkycoinCheckMessageSignature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SkycoinCheckMessageSignature) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *SkycoinCheckMessageSignature) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *SkycoinCheckMessageSignature) GetSignature() string {
	if m != nil && m.Signature != nil {
		return *m.Signature
	}
	return ""
}

// *
// Request: Sign a message digest using the given secret key.
// @next Failure
// @next ResponseSkycoinSignMessage
type SkycoinSignMessage struct {
	AddressN         *uint32 `protobuf:"varint,1,req,name=address_n,json=addressN" json:"address_n,omitempty"`
	Message          *string `protobuf:"bytes,2,req,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SkycoinSignMessage) Reset()                    { *m = SkycoinSignMessage{} }
func (m *SkycoinSignMessage) String() string            { return proto.CompactTextString(m) }
func (*SkycoinSignMessage) ProtoMessage()               {}
func (*SkycoinSignMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SkycoinSignMessage) GetAddressN() uint32 {
	if m != nil && m.AddressN != nil {
		return *m.AddressN
	}
	return 0
}

func (m *SkycoinSignMessage) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

// *
// Response: Return the generated skycoin address
// @prev SkycoinAddress
type ResponseSkycoinSignMessage struct {
	SignedMessage    *string `protobuf:"bytes,1,req,name=signed_message,json=signedMessage" json:"signed_message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ResponseSkycoinSignMessage) Reset()                    { *m = ResponseSkycoinSignMessage{} }
func (m *ResponseSkycoinSignMessage) String() string            { return proto.CompactTextString(m) }
func (*ResponseSkycoinSignMessage) ProtoMessage()               {}
func (*ResponseSkycoinSignMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ResponseSkycoinSignMessage) GetSignedMessage() string {
	if m != nil && m.SignedMessage != nil {
		return *m.SignedMessage
	}
	return ""
}

// *
// Request: Test if the device is alive, device sends back the message in Success response
// @next Success
type Ping struct {
	Message              *string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	ButtonProtection     *bool   `protobuf:"varint,2,opt,name=button_protection,json=buttonProtection" json:"button_protection,omitempty"`
	PinProtection        *bool   `protobuf:"varint,3,opt,name=pin_protection,json=pinProtection" json:"pin_protection,omitempty"`
	PassphraseProtection *bool   `protobuf:"varint,4,opt,name=passphrase_protection,json=passphraseProtection" json:"passphrase_protection,omitempty"`
	XXX_unrecognized     []byte  `json:"-"`
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Ping) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *Ping) GetButtonProtection() bool {
	if m != nil && m.ButtonProtection != nil {
		return *m.ButtonProtection
	}
	return false
}

func (m *Ping) GetPinProtection() bool {
	if m != nil && m.PinProtection != nil {
		return *m.PinProtection
	}
	return false
}

func (m *Ping) GetPassphraseProtection() bool {
	if m != nil && m.PassphraseProtection != nil {
		return *m.PassphraseProtection
	}
	return false
}

// *
// Response: Success of the previous request
type Success struct {
	Message          *string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Success) Reset()                    { *m = Success{} }
func (m *Success) String() string            { return proto.CompactTextString(m) }
func (*Success) ProtoMessage()               {}
func (*Success) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Success) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

// *
// Response: Failure of the previous request
type Failure struct {
	Code             *FailureType `protobuf:"varint,1,opt,name=code,enum=FailureType" json:"code,omitempty"`
	Message          *string      `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Failure) Reset()                    { *m = Failure{} }
func (m *Failure) String() string            { return proto.CompactTextString(m) }
func (*Failure) ProtoMessage()               {}
func (*Failure) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Failure) GetCode() FailureType {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return FailureType_Failure_UnexpectedMessage
}

func (m *Failure) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

// *
// Response: Device is waiting for HW button press.
// @next ButtonAck
// @next Cancel
type ButtonRequest struct {
	Code             *ButtonRequestType `protobuf:"varint,1,opt,name=code,enum=ButtonRequestType" json:"code,omitempty"`
	Data             *string            `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *ButtonRequest) Reset()                    { *m = ButtonRequest{} }
func (m *ButtonRequest) String() string            { return proto.CompactTextString(m) }
func (*ButtonRequest) ProtoMessage()               {}
func (*ButtonRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ButtonRequest) GetCode() ButtonRequestType {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ButtonRequestType_ButtonRequest_Other
}

func (m *ButtonRequest) GetData() string {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return ""
}

// *
// Request: Computer agrees to wait for HW button press
// @prev ButtonRequest
type ButtonAck struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ButtonAck) Reset()                    { *m = ButtonAck{} }
func (m *ButtonAck) String() string            { return proto.CompactTextString(m) }
func (*ButtonAck) ProtoMessage()               {}
func (*ButtonAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

// *
// Response: Device is asking computer to show PIN matrix and awaits PIN encoded using this matrix scheme
// @next PinMatrixAck
// @next Cancel
type PinMatrixRequest struct {
	Type             *PinMatrixRequestType `protobuf:"varint,1,opt,name=type,enum=PinMatrixRequestType" json:"type,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *PinMatrixRequest) Reset()                    { *m = PinMatrixRequest{} }
func (m *PinMatrixRequest) String() string            { return proto.CompactTextString(m) }
func (*PinMatrixRequest) ProtoMessage()               {}
func (*PinMatrixRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *PinMatrixRequest) GetType() PinMatrixRequestType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return PinMatrixRequestType_PinMatrixRequestType_Current
}

// *
// Request: Computer responds with encoded PIN
// @prev PinMatrixRequest
type PinMatrixAck struct {
	Pin              *string `protobuf:"bytes,1,req,name=pin" json:"pin,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PinMatrixAck) Reset()                    { *m = PinMatrixAck{} }
func (m *PinMatrixAck) String() string            { return proto.CompactTextString(m) }
func (*PinMatrixAck) ProtoMessage()               {}
func (*PinMatrixAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *PinMatrixAck) GetPin() string {
	if m != nil && m.Pin != nil {
		return *m.Pin
	}
	return ""
}

// *
// Request: Abort last operation that required user interaction
// @prev ButtonRequest
// @prev PinMatrixRequest
// @prev PassphraseRequest
type Cancel struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Cancel) Reset()                    { *m = Cancel{} }
func (m *Cancel) String() string            { return proto.CompactTextString(m) }
func (*Cancel) ProtoMessage()               {}
func (*Cancel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

// *
// Response: Device awaits encryption passphrase
// @next PassphraseAck
// @next Cancel
type PassphraseRequest struct {
	OnDevice         *bool  `protobuf:"varint,1,opt,name=on_device,json=onDevice" json:"on_device,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PassphraseRequest) Reset()                    { *m = PassphraseRequest{} }
func (m *PassphraseRequest) String() string            { return proto.CompactTextString(m) }
func (*PassphraseRequest) ProtoMessage()               {}
func (*PassphraseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *PassphraseRequest) GetOnDevice() bool {
	if m != nil && m.OnDevice != nil {
		return *m.OnDevice
	}
	return false
}

// *
// Request: Send passphrase back
// @prev PassphraseRequest
// @next PassphraseStateRequest
type PassphraseAck struct {
	Passphrase       *string `protobuf:"bytes,1,opt,name=passphrase" json:"passphrase,omitempty"`
	State            []byte  `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PassphraseAck) Reset()                    { *m = PassphraseAck{} }
func (m *PassphraseAck) String() string            { return proto.CompactTextString(m) }
func (*PassphraseAck) ProtoMessage()               {}
func (*PassphraseAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *PassphraseAck) GetPassphrase() string {
	if m != nil && m.Passphrase != nil {
		return *m.Passphrase
	}
	return ""
}

func (m *PassphraseAck) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

// *
// @prev PassphraseAck
// @next PassphraseStateAck
type PassphraseStateRequest struct {
	State            []byte `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PassphraseStateRequest) Reset()                    { *m = PassphraseStateRequest{} }
func (m *PassphraseStateRequest) String() string            { return proto.CompactTextString(m) }
func (*PassphraseStateRequest) ProtoMessage()               {}
func (*PassphraseStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *PassphraseStateRequest) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

// *
// @prev PassphraseStateRequest
type PassphraseStateAck struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *PassphraseStateAck) Reset()                    { *m = PassphraseStateAck{} }
func (m *PassphraseStateAck) String() string            { return proto.CompactTextString(m) }
func (*PassphraseStateAck) ProtoMessage()               {}
func (*PassphraseStateAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

// *
// Request: Request a sample of random data generated by hardware RNG. May be used for testing.
// @next ButtonRequest
// @next Entropy
// @next Failure
type GetEntropy struct {
	Size             *uint32 `protobuf:"varint,1,req,name=size" json:"size,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetEntropy) Reset()                    { *m = GetEntropy{} }
func (m *GetEntropy) String() string            { return proto.CompactTextString(m) }
func (*GetEntropy) ProtoMessage()               {}
func (*GetEntropy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *GetEntropy) GetSize() uint32 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

// *
// Request: Request firmware version
// @next Success
type GetVersion struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetVersion) Reset()                    { *m = GetVersion{} }
func (m *GetVersion) String() string            { return proto.CompactTextString(m) }
func (*GetVersion) ProtoMessage()               {}
func (*GetVersion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

// *
// Response: Reply with random data generated by internal RNG
// @prev GetEntropy
type Entropy struct {
	Entropy          []byte `protobuf:"bytes,1,req,name=entropy" json:"entropy,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Entropy) Reset()                    { *m = Entropy{} }
func (m *Entropy) String() string            { return proto.CompactTextString(m) }
func (*Entropy) ProtoMessage()               {}
func (*Entropy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *Entropy) GetEntropy() []byte {
	if m != nil {
		return m.Entropy
	}
	return nil
}

// *
// Request: Request device to wipe all sensitive data and settings
// @next ButtonRequest
type WipeDevice struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *WipeDevice) Reset()                    { *m = WipeDevice{} }
func (m *WipeDevice) String() string            { return proto.CompactTextString(m) }
func (*WipeDevice) ProtoMessage()               {}
func (*WipeDevice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

// *
// Request: Load seed and related internal settings from the computer
// @next ButtonRequest
// @next Success
// @next Failure
type LoadDevice struct {
	Mnemonic             *string     `protobuf:"bytes,1,opt,name=mnemonic" json:"mnemonic,omitempty"`
	Node                 *HDNodeType `protobuf:"bytes,2,opt,name=node" json:"node,omitempty"`
	Pin                  *string     `protobuf:"bytes,3,opt,name=pin" json:"pin,omitempty"`
	PassphraseProtection *bool       `protobuf:"varint,4,opt,name=passphrase_protection,json=passphraseProtection" json:"passphrase_protection,omitempty"`
	Language             *string     `protobuf:"bytes,5,opt,name=language,def=english" json:"language,omitempty"`
	Label                *string     `protobuf:"bytes,6,opt,name=label" json:"label,omitempty"`
	SkipChecksum         *bool       `protobuf:"varint,7,opt,name=skip_checksum,json=skipChecksum" json:"skip_checksum,omitempty"`
	U2FCounter           *uint32     `protobuf:"varint,8,opt,name=u2f_counter,json=u2fCounter" json:"u2f_counter,omitempty"`
	XXX_unrecognized     []byte      `json:"-"`
}

func (m *LoadDevice) Reset()                    { *m = LoadDevice{} }
func (m *LoadDevice) String() string            { return proto.CompactTextString(m) }
func (*LoadDevice) ProtoMessage()               {}
func (*LoadDevice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

const Default_LoadDevice_Language string = "english"

func (m *LoadDevice) GetMnemonic() string {
	if m != nil && m.Mnemonic != nil {
		return *m.Mnemonic
	}
	return ""
}

func (m *LoadDevice) GetNode() *HDNodeType {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *LoadDevice) GetPin() string {
	if m != nil && m.Pin != nil {
		return *m.Pin
	}
	return ""
}

func (m *LoadDevice) GetPassphraseProtection() bool {
	if m != nil && m.PassphraseProtection != nil {
		return *m.PassphraseProtection
	}
	return false
}

func (m *LoadDevice) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return Default_LoadDevice_Language
}

func (m *LoadDevice) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *LoadDevice) GetSkipChecksum() bool {
	if m != nil && m.SkipChecksum != nil {
		return *m.SkipChecksum
	}
	return false
}

func (m *LoadDevice) GetU2FCounter() uint32 {
	if m != nil && m.U2FCounter != nil {
		return *m.U2FCounter
	}
	return 0
}

// *
// Request: Ask device to do initialization involving user interaction
// @next EntropyRequest
// @next Failure
type ResetDevice struct {
	DisplayRandom        *bool   `protobuf:"varint,1,opt,name=display_random,json=displayRandom" json:"display_random,omitempty"`
	Strength             *uint32 `protobuf:"varint,2,opt,name=strength,def=256" json:"strength,omitempty"`
	PassphraseProtection *bool   `protobuf:"varint,3,opt,name=passphrase_protection,json=passphraseProtection" json:"passphrase_protection,omitempty"`
	PinProtection        *bool   `protobuf:"varint,4,opt,name=pin_protection,json=pinProtection" json:"pin_protection,omitempty"`
	Language             *string `protobuf:"bytes,5,opt,name=language,def=english" json:"language,omitempty"`
	Label                *string `protobuf:"bytes,6,opt,name=label" json:"label,omitempty"`
	U2FCounter           *uint32 `protobuf:"varint,7,opt,name=u2f_counter,json=u2fCounter" json:"u2f_counter,omitempty"`
	SkipBackup           *bool   `protobuf:"varint,8,opt,name=skip_backup,json=skipBackup" json:"skip_backup,omitempty"`
	XXX_unrecognized     []byte  `json:"-"`
}

func (m *ResetDevice) Reset()                    { *m = ResetDevice{} }
func (m *ResetDevice) String() string            { return proto.CompactTextString(m) }
func (*ResetDevice) ProtoMessage()               {}
func (*ResetDevice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

const Default_ResetDevice_Strength uint32 = 256
const Default_ResetDevice_Language string = "english"

func (m *ResetDevice) GetDisplayRandom() bool {
	if m != nil && m.DisplayRandom != nil {
		return *m.DisplayRandom
	}
	return false
}

func (m *ResetDevice) GetStrength() uint32 {
	if m != nil && m.Strength != nil {
		return *m.Strength
	}
	return Default_ResetDevice_Strength
}

func (m *ResetDevice) GetPassphraseProtection() bool {
	if m != nil && m.PassphraseProtection != nil {
		return *m.PassphraseProtection
	}
	return false
}

func (m *ResetDevice) GetPinProtection() bool {
	if m != nil && m.PinProtection != nil {
		return *m.PinProtection
	}
	return false
}

func (m *ResetDevice) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return Default_ResetDevice_Language
}

func (m *ResetDevice) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *ResetDevice) GetU2FCounter() uint32 {
	if m != nil && m.U2FCounter != nil {
		return *m.U2FCounter
	}
	return 0
}

func (m *ResetDevice) GetSkipBackup() bool {
	if m != nil && m.SkipBackup != nil {
		return *m.SkipBackup
	}
	return false
}

// *
// Request: Perform backup of the device seed if not backed up using ResetDevice
// @next ButtonRequest
type BackupDevice struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *BackupDevice) Reset()                    { *m = BackupDevice{} }
func (m *BackupDevice) String() string            { return proto.CompactTextString(m) }
func (*BackupDevice) ProtoMessage()               {}
func (*BackupDevice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

// *
// Response: Ask for additional entropy from host computer
// @prev ResetDevice
// @next EntropyAck
type EntropyRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *EntropyRequest) Reset()                    { *m = EntropyRequest{} }
func (m *EntropyRequest) String() string            { return proto.CompactTextString(m) }
func (*EntropyRequest) ProtoMessage()               {}
func (*EntropyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

// *
// Request: Provide additional entropy for seed generation function
// @prev EntropyRequest
// @next ButtonRequest
type EntropyAck struct {
	Entropy          []byte `protobuf:"bytes,1,opt,name=entropy" json:"entropy,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *EntropyAck) Reset()                    { *m = EntropyAck{} }
func (m *EntropyAck) String() string            { return proto.CompactTextString(m) }
func (*EntropyAck) ProtoMessage()               {}
func (*EntropyAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *EntropyAck) GetEntropy() []byte {
	if m != nil {
		return m.Entropy
	}
	return nil
}

// *
// Request: Start recovery workflow asking user for specific words of mnemonic
// Used to recovery device safely even on untrusted computer.
// @next WordRequest
type RecoveryDevice struct {
	WordCount            *uint32 `protobuf:"varint,1,opt,name=word_count,json=wordCount" json:"word_count,omitempty"`
	PassphraseProtection *bool   `protobuf:"varint,2,opt,name=passphrase_protection,json=passphraseProtection" json:"passphrase_protection,omitempty"`
	PinProtection        *bool   `protobuf:"varint,3,opt,name=pin_protection,json=pinProtection" json:"pin_protection,omitempty"`
	Language             *string `protobuf:"bytes,4,opt,name=language,def=english" json:"language,omitempty"`
	Label                *string `protobuf:"bytes,5,opt,name=label" json:"label,omitempty"`
	EnforceWordlist      *bool   `protobuf:"varint,6,opt,name=enforce_wordlist,json=enforceWordlist" json:"enforce_wordlist,omitempty"`
	// 7 reserved for unused recovery method
	Type             *uint32 `protobuf:"varint,8,opt,name=type" json:"type,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RecoveryDevice) Reset()                    { *m = RecoveryDevice{} }
func (m *RecoveryDevice) String() string            { return proto.CompactTextString(m) }
func (*RecoveryDevice) ProtoMessage()               {}
func (*RecoveryDevice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

const Default_RecoveryDevice_Language string = "english"

func (m *RecoveryDevice) GetWordCount() uint32 {
	if m != nil && m.WordCount != nil {
		return *m.WordCount
	}
	return 0
}

func (m *RecoveryDevice) GetPassphraseProtection() bool {
	if m != nil && m.PassphraseProtection != nil {
		return *m.PassphraseProtection
	}
	return false
}

func (m *RecoveryDevice) GetPinProtection() bool {
	if m != nil && m.PinProtection != nil {
		return *m.PinProtection
	}
	return false
}

func (m *RecoveryDevice) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return Default_RecoveryDevice_Language
}

func (m *RecoveryDevice) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *RecoveryDevice) GetEnforceWordlist() bool {
	if m != nil && m.EnforceWordlist != nil {
		return *m.EnforceWordlist
	}
	return false
}

func (m *RecoveryDevice) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

// *
// Response: Device is waiting for user to enter word of the mnemonic
// Its position is shown only on device's internal display.
// @prev RecoveryDevice
// @prev WordAck
type WordRequest struct {
	Type             *WordRequestType `protobuf:"varint,1,opt,name=type,enum=WordRequestType" json:"type,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *WordRequest) Reset()                    { *m = WordRequest{} }
func (m *WordRequest) String() string            { return proto.CompactTextString(m) }
func (*WordRequest) ProtoMessage()               {}
func (*WordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *WordRequest) GetType() WordRequestType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return WordRequestType_WordRequestType_Plain
}

// *
// Request: Computer replies with word from the mnemonic
// @prev WordRequest
// @next WordRequest
// @next Success
// @next Failure
type WordAck struct {
	Word             *string `protobuf:"bytes,1,req,name=word" json:"word,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *WordAck) Reset()                    { *m = WordAck{} }
func (m *WordAck) String() string            { return proto.CompactTextString(m) }
func (*WordAck) ProtoMessage()               {}
func (*WordAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *WordAck) GetWord() string {
	if m != nil && m.Word != nil {
		return *m.Word
	}
	return ""
}

// *
// Request: Ask device to erase its firmware (so it can be replaced via FirmwareUpload)
// @start
// @next FirmwareRequest
type FirmwareErase struct {
	Length           *uint32 `protobuf:"varint,1,opt,name=length" json:"length,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FirmwareErase) Reset()                    { *m = FirmwareErase{} }
func (m *FirmwareErase) String() string            { return proto.CompactTextString(m) }
func (*FirmwareErase) ProtoMessage()               {}
func (*FirmwareErase) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *FirmwareErase) GetLength() uint32 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return 0
}

// *
// Response: Ask for firmware chunk
// @next FirmwareUpload
type FirmwareRequest struct {
	Offset           *uint32 `protobuf:"varint,1,opt,name=offset" json:"offset,omitempty"`
	Length           *uint32 `protobuf:"varint,2,opt,name=length" json:"length,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FirmwareRequest) Reset()                    { *m = FirmwareRequest{} }
func (m *FirmwareRequest) String() string            { return proto.CompactTextString(m) }
func (*FirmwareRequest) ProtoMessage()               {}
func (*FirmwareRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *FirmwareRequest) GetOffset() uint32 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

func (m *FirmwareRequest) GetLength() uint32 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return 0
}

// *
// Request: Ask device to upload its firmware
// @start
// @next FirmwareUpload
type FirmwareUpload struct {
	Payload          []byte `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
	Hash             []byte `protobuf:"bytes,2,opt,name=hash" json:"hash,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FirmwareUpload) Reset()                    { *m = FirmwareUpload{} }
func (m *FirmwareUpload) String() string            { return proto.CompactTextString(m) }
func (*FirmwareUpload) ProtoMessage()               {}
func (*FirmwareUpload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *FirmwareUpload) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *FirmwareUpload) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func init() {
	proto.RegisterType((*Initialize)(nil), "Initialize")
	proto.RegisterType((*GetFeatures)(nil), "GetFeatures")
	proto.RegisterType((*Features)(nil), "Features")
	proto.RegisterType((*ApplySettings)(nil), "ApplySettings")
	proto.RegisterType((*GenerateMnemonic)(nil), "GenerateMnemonic")
	proto.RegisterType((*SetMnemonic)(nil), "SetMnemonic")
	proto.RegisterType((*ChangePin)(nil), "ChangePin")
	proto.RegisterType((*SkycoinAddress)(nil), "SkycoinAddress")
	proto.RegisterType((*ResponseSkycoinAddress)(nil), "ResponseSkycoinAddress")
	proto.RegisterType((*SkycoinCheckMessageSignature)(nil), "SkycoinCheckMessageSignature")
	proto.RegisterType((*SkycoinSignMessage)(nil), "SkycoinSignMessage")
	proto.RegisterType((*ResponseSkycoinSignMessage)(nil), "ResponseSkycoinSignMessage")
	proto.RegisterType((*Ping)(nil), "Ping")
	proto.RegisterType((*Success)(nil), "Success")
	proto.RegisterType((*Failure)(nil), "Failure")
	proto.RegisterType((*ButtonRequest)(nil), "ButtonRequest")
	proto.RegisterType((*ButtonAck)(nil), "ButtonAck")
	proto.RegisterType((*PinMatrixRequest)(nil), "PinMatrixRequest")
	proto.RegisterType((*PinMatrixAck)(nil), "PinMatrixAck")
	proto.RegisterType((*Cancel)(nil), "Cancel")
	proto.RegisterType((*PassphraseRequest)(nil), "PassphraseRequest")
	proto.RegisterType((*PassphraseAck)(nil), "PassphraseAck")
	proto.RegisterType((*PassphraseStateRequest)(nil), "PassphraseStateRequest")
	proto.RegisterType((*PassphraseStateAck)(nil), "PassphraseStateAck")
	proto.RegisterType((*GetEntropy)(nil), "GetEntropy")
	proto.RegisterType((*GetVersion)(nil), "GetVersion")
	proto.RegisterType((*Entropy)(nil), "Entropy")
	proto.RegisterType((*WipeDevice)(nil), "WipeDevice")
	proto.RegisterType((*LoadDevice)(nil), "LoadDevice")
	proto.RegisterType((*ResetDevice)(nil), "ResetDevice")
	proto.RegisterType((*BackupDevice)(nil), "BackupDevice")
	proto.RegisterType((*EntropyRequest)(nil), "EntropyRequest")
	proto.RegisterType((*EntropyAck)(nil), "EntropyAck")
	proto.RegisterType((*RecoveryDevice)(nil), "RecoveryDevice")
	proto.RegisterType((*WordRequest)(nil), "WordRequest")
	proto.RegisterType((*WordAck)(nil), "WordAck")
	proto.RegisterType((*FirmwareErase)(nil), "FirmwareErase")
	proto.RegisterType((*FirmwareRequest)(nil), "FirmwareRequest")
	proto.RegisterType((*FirmwareUpload)(nil), "FirmwareUpload")
	proto.RegisterEnum("MessageType", MessageType_name, MessageType_value)
}

func init() { proto.RegisterFile("messages.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1838 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0xdd, 0x73, 0xdb, 0xc6,
	0x11, 0x2f, 0x3f, 0x2c, 0x92, 0x4b, 0x82, 0x3e, 0xc1, 0xb2, 0x02, 0xd3, 0x96, 0xcd, 0x80, 0xfe,
	0x90, 0x92, 0x94, 0xcd, 0x28, 0x6d, 0x3a, 0x93, 0x99, 0x76, 0x46, 0x56, 0x6c, 0xc7, 0xe3, 0xca,
	0xa3, 0x81, 0xd2, 0xe4, 0x11, 0x03, 0x01, 0x47, 0xf2, 0x2a, 0xf2, 0x80, 0xe0, 0x40, 0xc9, 0xf4,
	0x7b, 0x67, 0xfa, 0xd8, 0xbe, 0xe5, 0xb5, 0x8f, 0x7d, 0xe9, 0xf4, 0xa5, 0x33, 0xfd, 0xf3, 0x3a,
	0x77, 0xb7, 0x20, 0x0f, 0x30, 0xa4, 0x4c, 0xda, 0xb7, 0xdb, 0xdd, 0x1f, 0x76, 0x6f, 0x3f, 0x6e,
	0x6f, 0x0f, 0xd0, 0x5f, 0x50, 0x21, 0x82, 0x29, 0x15, 0xe3, 0x24, 0x8d, 0xb3, 0x78, 0xd0, 0xcd,
	0x56, 0x49, 0x4e, 0xb8, 0x2e, 0xc0, 0x6b, 0xce, 0x32, 0x16, 0xcc, 0xd9, 0x7b, 0x6a, 0xef, 0xc0,
	0x2d, 0x91, 0x05, 0x19, 0x75, 0x6a, 0xc3, 0xda, 0x7e, 0xcf, 0xd3, 0x84, 0x6b, 0x41, 0xf7, 0x15,
	0xcd, 0x5e, 0xd2, 0x20, 0x5b, 0xa6, 0x54, 0xb8, 0x7f, 0xdf, 0x82, 0x76, 0x4e, 0xd8, 0xbb, 0xb0,
	0x75, 0x49, 0x79, 0x14, 0xa7, 0xea, 0x93, 0x8e, 0x87, 0x94, 0x3d, 0x02, 0x6b, 0x11, 0xfc, 0x29,
	0x4e, 0xfd, 0x4b, 0x9a, 0x0a, 0x16, 0x73, 0xa7, 0x3e, 0xac, 0xed, 0x5b, 0x5e, 0x4f, 0x31, 0xbf,
	0xd3, 0x3c, 0x05, 0x62, 0xdc, 0x00, 0x35, 0x10, 0x24, 0x99, 0x06, 0x28, 0x09, 0xb2, 0x70, 0xb6,
	0x06, 0x35, 0x35, 0x48, 0x31, 0x73, 0xd0, 0x33, 0xb8, 0x7d, 0x1e, 0xc7, 0xd9, 0x3c, 0x0e, 0x22,
	0x9a, 0xfa, 0x8b, 0x38, 0xa2, 0xce, 0xad, 0x61, 0x6d, 0xbf, 0xed, 0xf5, 0x37, 0xec, 0x93, 0x38,
	0xa2, 0xf6, 0x7d, 0xe8, 0x44, 0xf4, 0x92, 0x85, 0xd4, 0x67, 0x91, 0xb3, 0xa5, 0xb6, 0xdc, 0xd6,
	0x8c, 0xd7, 0x91, 0xfd, 0x04, 0xfa, 0x09, 0xe3, 0xbe, 0x8c, 0x0c, 0x0d, 0x33, 0x69, 0xab, 0xa5,
	0x94, 0x58, 0x09, 0xe3, 0xa7, 0x6b, 0xa6, 0xfd, 0x05, 0xdc, 0x4d, 0x02, 0x21, 0x92, 0x59, 0x1a,
	0x08, 0x6a, 0xa2, 0xdb, 0x0a, 0xbd, 0xb3, 0x11, 0x1a, 0x1f, 0x0d, 0xa0, 0x3d, 0x0f, 0xf8, 0x74,
	0x19, 0x4c, 0xa9, 0xd3, 0xd1, 0x76, 0x73, 0x5a, 0x86, 0x7d, 0x1e, 0x9c, 0xd3, 0xb9, 0x03, 0x4a,
	0xa0, 0x09, 0x7b, 0x08, 0x5d, 0xb6, 0x4e, 0x4d, 0xe4, 0xf4, 0x94, 0x72, 0x93, 0x55, 0xf2, 0x7a,
	0x16, 0x88, 0x99, 0xd3, 0x57, 0x89, 0x33, 0xbc, 0xfe, 0x26, 0x10, 0x33, 0x7b, 0x0f, 0x40, 0x3a,
	0x16, 0x06, 0xe1, 0x8c, 0x46, 0x0e, 0x51, 0x9a, 0x3a, 0x09, 0xe3, 0xc7, 0x8a, 0x61, 0x7f, 0x0a,
	0xdb, 0x86, 0x43, 0x88, 0xda, 0x56, 0x28, 0xb2, 0x11, 0x20, 0xf8, 0x00, 0xc8, 0x84, 0xa5, 0x8b,
	0xab, 0x20, 0x95, 0xbe, 0x53, 0x41, 0x79, 0xe6, 0xd8, 0x0a, 0x7b, 0x3b, 0xe7, 0x9f, 0x6a, 0xb6,
	0xfd, 0x31, 0xf4, 0x38, 0xa5, 0x91, 0xf0, 0xcf, 0x83, 0xf0, 0x62, 0x99, 0x38, 0x77, 0xb4, 0x0b,
	0x8a, 0xf7, 0x5c, 0xb1, 0xa4, 0xeb, 0x32, 0x5b, 0x73, 0xe7, 0xae, 0x76, 0x5d, 0x11, 0xf6, 0x3d,
	0x68, 0x4f, 0xae, 0x7c, 0x55, 0x2b, 0xce, 0xae, 0x4a, 0x77, 0x6b, 0x72, 0x75, 0x22, 0xc9, 0x5c,
	0x24, 0x2b, 0xc4, 0xf9, 0x68, 0x2d, 0x92, 0x24, 0x8a, 0x54, 0x5d, 0x38, 0x4e, 0x2e, 0x3a, 0x95,
	0xa4, 0x4c, 0xfb, 0xe4, 0xca, 0xc7, 0x4a, 0xbd, 0xa7, 0xc3, 0x3f, 0xb9, 0xfa, 0x4e, 0xd7, 0xea,
	0x63, 0xe8, 0xaf, 0x85, 0xfe, 0x05, 0x5d, 0x09, 0x67, 0xa0, 0xa2, 0xd8, 0xcb, 0x11, 0x6f, 0xe8,
	0x4a, 0xc8, 0x20, 0x2d, 0xf9, 0x84, 0x71, 0x26, 0x66, 0x34, 0xca, 0x3d, 0xba, 0xaf, 0x83, 0xb4,
	0x11, 0x68, 0xb7, 0xdc, 0xbf, 0xd4, 0xc0, 0x3a, 0x4a, 0x92, 0xf9, 0xea, 0x8c, 0x66, 0x19, 0xe3,
	0x53, 0x51, 0xc8, 0x7f, 0xed, 0xba, 0xfc, 0xd7, 0xcd, 0xfc, 0x3f, 0x81, 0xfe, 0x52, 0xd6, 0xd7,
	0x3a, 0x01, 0xea, 0x78, 0xb4, 0x3d, 0x6b, 0x29, 0xe8, 0xe9, 0x9a, 0x69, 0x3f, 0x04, 0x98, 0xc5,
	0x0b, 0x2a, 0xc2, 0x94, 0x52, 0x7d, 0x38, 0x7a, 0x9e, 0xc1, 0x71, 0x5f, 0x01, 0x79, 0x45, 0x39,
	0x4d, 0x83, 0x8c, 0x9e, 0x70, 0xba, 0x88, 0x39, 0x0b, 0xaf, 0xaf, 0xe0, 0xda, 0xf5, 0x15, 0xec,
	0x1e, 0x40, 0xf7, 0x8c, 0x66, 0x6b, 0x1d, 0x03, 0x68, 0x2f, 0x70, 0xed, 0xd4, 0x86, 0x75, 0xe9,
	0x50, 0x4e, 0xbb, 0x23, 0xe8, 0x1c, 0xcf, 0x02, 0x3e, 0xa5, 0xa7, 0x8c, 0xcb, 0x16, 0x91, 0xd2,
	0x45, 0x7c, 0x49, 0x51, 0x3b, 0x52, 0xee, 0x15, 0xf4, 0xcf, 0x2e, 0x56, 0x61, 0xcc, 0xf8, 0x51,
	0x14, 0xa5, 0x54, 0x08, 0x99, 0xa5, 0x40, 0x2f, 0x7d, 0xae, 0x74, 0x5a, 0x5e, 0x1b, 0x19, 0x6f,
	0xed, 0x47, 0xd0, 0x15, 0x59, 0x90, 0x66, 0x3e, 0xe3, 0x11, 0x7d, 0x87, 0xfd, 0x04, 0x14, 0xeb,
	0xb5, 0xe4, 0xc8, 0xd3, 0x10, 0xc6, 0x5c, 0xd6, 0xa0, 0x8f, 0x1f, 0x61, 0xc0, 0xfa, 0xc8, 0x46,
	0x33, 0xee, 0x97, 0xb0, 0xeb, 0x51, 0x91, 0xc4, 0x5c, 0xd0, 0xd2, 0x06, 0x1e, 0xac, 0x37, 0x40,
	0x85, 0x53, 0x1b, 0x36, 0xf6, 0x3b, 0xde, 0x86, 0xe1, 0x26, 0xf0, 0x00, 0xf1, 0xc7, 0x33, 0x1a,
	0x5e, 0x9c, 0xe8, 0xb6, 0x7a, 0xc6, 0xa6, 0x5c, 0x35, 0x43, 0xdb, 0x81, 0x56, 0x6e, 0x58, 0x07,
	0x24, 0x27, 0xa5, 0x04, 0x9b, 0xb0, 0x53, 0xd7, 0x12, 0x24, 0xa5, 0x45, 0x91, 0x2b, 0x70, 0x1a,
	0x4a, 0xb6, 0x61, 0xb8, 0x6f, 0xc0, 0x46, 0x8b, 0xd2, 0x0a, 0x1a, 0xbc, 0x39, 0x4c, 0xd7, 0x9a,
	0x72, 0x8f, 0x61, 0x50, 0x72, 0xdb, 0x54, 0xfa, 0x04, 0xfa, 0xd2, 0x2e, 0x8d, 0xfc, 0xfc, 0x73,
	0xed, 0x83, 0xa5, 0xb9, 0x08, 0x73, 0xff, 0x51, 0x83, 0xe6, 0x29, 0xe3, 0x53, 0xd3, 0x8e, 0x2e,
	0xe7, 0xb5, 0x4b, 0x9f, 0xc2, 0xf6, 0xf9, 0x32, 0xcb, 0xe2, 0x42, 0x23, 0xad, 0xeb, 0x83, 0xa2,
	0x05, 0x46, 0x5b, 0xfc, 0xb0, 0xe5, 0x36, 0x7e, 0x56, 0xcb, 0x6d, 0xde, 0x50, 0xb0, 0x23, 0x68,
	0x9d, 0x2d, 0xc3, 0xb0, 0x94, 0x80, 0xe2, 0x6e, 0xdd, 0x17, 0xd0, 0x7a, 0x19, 0xb0, 0xb9, 0xcc,
	0xdf, 0x10, 0x9a, 0xa1, 0xbc, 0x39, 0x24, 0xa2, 0x7f, 0xd8, 0x1b, 0x23, 0xff, 0xdb, 0x55, 0x42,
	0x3d, 0x25, 0x29, 0x06, 0xb7, 0xa0, 0xe6, 0x0d, 0x58, 0xcf, 0x95, 0x6f, 0x1e, 0xfd, 0x61, 0x49,
	0x45, 0x66, 0x3f, 0x2d, 0x28, 0xb3, 0xc7, 0x05, 0xa9, 0xa1, 0xd2, 0x86, 0x66, 0x14, 0x64, 0x01,
	0xea, 0x53, 0x6b, 0xb7, 0x0b, 0x1d, 0x0d, 0x3f, 0x0a, 0x2f, 0xdc, 0xdf, 0x01, 0x39, 0x65, 0xfc,
	0x24, 0xc8, 0x52, 0xf6, 0x2e, 0x57, 0x7e, 0x00, 0x4d, 0x79, 0x89, 0xa3, 0xf2, 0xbb, 0xe3, 0x32,
	0x40, 0xeb, 0x97, 0x10, 0x77, 0x08, 0xbd, 0xb5, 0xf4, 0x28, 0xbc, 0xb0, 0x09, 0x34, 0x12, 0xc6,
	0x31, 0xb9, 0x72, 0xe9, 0xb6, 0x61, 0xeb, 0x38, 0xe0, 0x21, 0x9d, 0xbb, 0x9f, 0xc3, 0xf6, 0xa6,
	0xb1, 0xe4, 0xb6, 0xee, 0x43, 0x27, 0xe6, 0xbe, 0xbe, 0x23, 0xf1, 0x04, 0xb7, 0x63, 0xfe, 0xb5,
	0xa2, 0xdd, 0x17, 0x60, 0x6d, 0xbe, 0x90, 0xea, 0x1f, 0x02, 0x18, 0x0d, 0x4b, 0xc7, 0xda, 0xe0,
	0x6c, 0x26, 0x8c, 0xba, 0x39, 0x61, 0x8c, 0x61, 0x77, 0xa3, 0xe6, 0x4c, 0xb2, 0x72, 0xeb, 0xd5,
	0x13, 0xc9, 0x0e, 0xd8, 0x25, 0xbc, 0x8c, 0xd4, 0x10, 0xe0, 0x15, 0xcd, 0x5e, 0xf0, 0x2c, 0x8d,
	0x93, 0x95, 0x0c, 0xac, 0x60, 0xef, 0x29, 0x1e, 0x10, 0xb5, 0x76, 0x7b, 0x0a, 0x81, 0x43, 0x83,
	0xac, 0x8f, 0x1c, 0xec, 0x40, 0x8b, 0xea, 0xa5, 0xc2, 0xf7, 0xbc, 0x9c, 0x94, 0x9f, 0x7c, 0xcf,
	0x12, 0x8a, 0xfe, 0xfe, 0xad, 0x0e, 0xf0, 0x87, 0x38, 0x88, 0x34, 0x59, 0xea, 0x81, 0x35, 0xb3,
	0x07, 0xda, 0x8f, 0xa0, 0xc9, 0x65, 0x01, 0x48, 0x47, 0xbb, 0x87, 0xdd, 0xf1, 0x37, 0x5f, 0xbf,
	0x8d, 0x23, 0x2c, 0x26, 0x29, 0xc8, 0x33, 0xd1, 0x50, 0xdf, 0xc9, 0xe5, 0xff, 0x54, 0xe5, 0xf6,
	0xc8, 0xb8, 0x58, 0xe4, 0xcc, 0xd3, 0xf9, 0xaa, 0x45, 0xf9, 0x74, 0xce, 0xc4, 0xac, 0xea, 0x86,
	0xd9, 0x32, 0x6f, 0x98, 0x11, 0x58, 0xe2, 0x82, 0x25, 0x7e, 0x28, 0xdb, 0x99, 0x58, 0x2e, 0x70,
	0xdc, 0xe9, 0x49, 0xe6, 0x31, 0xf2, 0x64, 0xdf, 0x5d, 0x1e, 0x4e, 0xfc, 0x30, 0x5e, 0xf2, 0x8c,
	0xa6, 0x6a, 0xc6, 0xb1, 0x3c, 0x58, 0x1e, 0x4e, 0x8e, 0x35, 0xc7, 0xfd, 0x67, 0x1d, 0xba, 0x1e,
	0x15, 0x34, 0xc3, 0xa0, 0x3c, 0x81, 0x7e, 0xc4, 0x44, 0x32, 0x0f, 0x56, 0x7e, 0x1a, 0xf0, 0x28,
	0x5e, 0x60, 0xd5, 0x58, 0xc8, 0xf5, 0x14, 0xd3, 0x7e, 0x04, 0x6d, 0x91, 0xa5, 0x94, 0x4f, 0xb3,
	0x99, 0x6e, 0xe6, 0x5f, 0x35, 0x0e, 0x7f, 0xf3, 0xa5, 0xb7, 0x66, 0x5e, 0x1f, 0x8d, 0xc6, 0x0d,
	0xd1, 0xf8, 0xb0, 0x9f, 0x34, 0xab, 0xfa, 0xc9, 0xff, 0x11, 0xb4, 0x52, 0x3c, 0x5a, 0xe5, 0x78,
	0xa8, 0x8b, 0x4a, 0x46, 0x15, 0x47, 0x04, 0x3d, 0x14, 0x82, 0x64, 0xe1, 0x70, 0xd0, 0x87, 0x9e,
	0x5e, 0x61, 0x51, 0x11, 0xe8, 0x63, 0x1d, 0x62, 0xd5, 0xbb, 0x4f, 0x01, 0x90, 0x23, 0xcf, 0x54,
	0xa1, 0x38, 0x6b, 0x66, 0x71, 0xfe, 0xb9, 0x0e, 0x7d, 0x8f, 0x86, 0xf1, 0x25, 0x4d, 0x57, 0x18,
	0xfd, 0x3d, 0x80, 0xab, 0x38, 0x8d, 0xf4, 0xfe, 0x14, 0xde, 0xf2, 0x3a, 0x92, 0xa3, 0xb6, 0x77,
	0x7d, 0x50, 0xeb, 0x3f, 0x2b, 0xa8, 0x8d, 0x9f, 0x0a, 0x6a, 0xf3, 0x27, 0x83, 0x7a, 0xcb, 0x0c,
	0xea, 0x01, 0x10, 0xca, 0x27, 0x71, 0x1a, 0x52, 0x5f, 0xee, 0x75, 0xce, 0x44, 0xa6, 0xa2, 0xde,
	0xf6, 0x6e, 0x23, 0xff, 0x7b, 0x64, 0xcb, 0x73, 0xad, 0x7a, 0x9f, 0x2e, 0x44, 0xdd, 0xe4, 0xbe,
	0x80, 0xae, 0x94, 0xe7, 0x4d, 0xe3, 0x71, 0xa1, 0x3d, 0x92, 0xb1, 0x21, 0x33, 0x3a, 0xe3, 0x1e,
	0xb4, 0xa4, 0x40, 0x46, 0xd8, 0x86, 0xa6, 0x34, 0x8b, 0x5d, 0x51, 0xad, 0xdd, 0x67, 0x60, 0xbd,
	0xc4, 0x79, 0xf6, 0x85, 0x6a, 0x5d, 0xbb, 0xb0, 0x35, 0xd7, 0xe5, 0xaa, 0xa3, 0x8a, 0x94, 0x7b,
	0x04, 0xb7, 0x73, 0x60, 0xbe, 0x81, 0x5d, 0xd8, 0x8a, 0x27, 0x13, 0x41, 0xf3, 0x04, 0x20, 0x65,
	0xa8, 0xa8, 0x17, 0x54, 0xfc, 0x1e, 0xfa, 0xb9, 0x8a, 0x3f, 0x26, 0x72, 0x6e, 0x97, 0x39, 0x4f,
	0x82, 0x95, 0x5c, 0xe6, 0x39, 0x47, 0x52, 0xee, 0x55, 0x4d, 0xfa, 0xba, 0x81, 0xaa, 0xf5, 0x27,
	0x3f, 0x76, 0xa1, 0x8b, 0x37, 0xb4, 0x74, 0xd0, 0x1e, 0xc2, 0xae, 0x41, 0xfa, 0x9b, 0x17, 0x1e,
	0xf9, 0xc5, 0xa0, 0xf9, 0xd7, 0x7f, 0x3b, 0x35, 0x7b, 0x00, 0xc4, 0x44, 0xc8, 0x2b, 0x9d, 0xd4,
	0x50, 0xb6, 0x07, 0x77, 0x4c, 0x19, 0xde, 0xa1, 0xa4, 0x3e, 0x68, 0xfe, 0x58, 0x21, 0xc6, 0x5b,
	0x92, 0x34, 0x50, 0xfc, 0x08, 0xee, 0x9a, 0xe2, 0xf5, 0x1c, 0x48, 0x9a, 0xa8, 0xbe, 0xb4, 0xb9,
	0x4d, 0x77, 0x25, 0xb7, 0x10, 0xf1, 0x0c, 0xee, 0x15, 0x2c, 0x98, 0x69, 0x20, 0x5b, 0x83, 0xb6,
	0x04, 0xfd, 0x47, 0x02, 0xf7, 0x61, 0x50, 0x05, 0xd4, 0x31, 0x24, 0x2d, 0x03, 0x59, 0x32, 0xba,
	0xb9, 0x27, 0x48, 0xa7, 0xda, 0xeb, 0x5c, 0x0c, 0xe8, 0x56, 0x49, 0xc1, 0xe6, 0x12, 0x20, 0x16,
	0x2a, 0xf8, 0x18, 0x3e, 0x32, 0x11, 0x46, 0x4b, 0x24, 0x7d, 0x84, 0x3c, 0x84, 0x9d, 0xc2, 0x7e,
	0xf1, 0x15, 0x4d, 0xb6, 0xd1, 0xc8, 0x53, 0x78, 0x50, 0xca, 0x4a, 0xe1, 0x5a, 0x27, 0xf6, 0x1a,
	0xe7, 0x54, 0xe2, 0x8e, 0xc2, 0x0b, 0x72, 0x47, 0x7b, 0xfd, 0x2f, 0x89, 0x7b, 0x00, 0x76, 0x21,
	0x17, 0xea, 0x9a, 0x27, 0x3b, 0xb8, 0x9b, 0x51, 0x31, 0xcc, 0x85, 0xf7, 0x0a, 0xb9, 0x57, 0x0d,
	0x2a, 0x8c, 0x31, 0x64, 0x80, 0xfb, 0x19, 0x15, 0x73, 0xbe, 0x1e, 0x5e, 0xc8, 0x7d, 0x63, 0x33,
	0x6e, 0x71, 0xd3, 0x66, 0x0b, 0x24, 0x2e, 0x5a, 0x7b, 0x5c, 0x4c, 0x68, 0xb1, 0x2d, 0x92, 0x51,
	0x75, 0x2e, 0x36, 0xad, 0x92, 0x3c, 0x5e, 0x57, 0xd0, 0x5e, 0x21, 0x40, 0xe5, 0xa9, 0x86, 0x1c,
	0xa0, 0xaa, 0x52, 0xa9, 0x15, 0x86, 0x19, 0xf2, 0x89, 0xb1, 0xfb, 0x52, 0x76, 0x8d, 0x1f, 0x22,
	0xe4, 0xb7, 0x68, 0xf4, 0x33, 0x70, 0xab, 0x75, 0x99, 0x13, 0x0d, 0x39, 0x41, 0xcb, 0x9f, 0xc1,
	0xc3, 0x1b, 0xd0, 0xd2, 0xfc, 0x5b, 0xc3, 0x7c, 0x29, 0x30, 0xc5, 0xa6, 0x4f, 0x7e, 0x59, 0x5d,
	0x82, 0x46, 0xdf, 0x23, 0xe3, 0xea, 0xd3, 0x8b, 0x1d, 0x90, 0xfc, 0xaa, 0x5a, 0x83, 0xf1, 0xe0,
	0x23, 0x3f, 0x54, 0xe7, 0xa8, 0xf8, 0x84, 0x22, 0x29, 0xa2, 0x0e, 0x61, 0xbf, 0x02, 0x55, 0xf9,
	0x70, 0x22, 0x02, 0xbf, 0xd9, 0x2f, 0x86, 0xe4, 0xc3, 0x57, 0x0a, 0xc9, 0xaa, 0x43, 0x5d, 0xfd,
	0x9c, 0x23, 0x4b, 0xf4, 0xf9, 0x73, 0x78, 0x7a, 0x03, 0xda, 0xd4, 0x7f, 0x59, 0x7d, 0x10, 0xcb,
	0x0f, 0x68, 0x72, 0x55, 0xdd, 0xcb, 0x36, 0xc3, 0x25, 0x79, 0xa7, 0x11, 0xcf, 0x7f, 0x0d, 0xa3,
	0x30, 0x5e, 0x8c, 0x45, 0x90, 0xc5, 0x62, 0xc6, 0xe6, 0xc1, 0xb9, 0x18, 0x67, 0x29, 0x7d, 0x1f,
	0xa7, 0xe3, 0x39, 0x3b, 0xd7, 0x3f, 0xe1, 0xce, 0x97, 0x93, 0xe7, 0xd6, 0xb7, 0x8a, 0x89, 0xca,
	0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x5e, 0x66, 0x16, 0x58, 0xb4, 0x13, 0x00, 0x00,
}
